
ASGC_Farming_System_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bfc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed4  08006ed4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006edc  08006edc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006ef4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006f54  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006fc  240000d0  08006fb4  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240007cc  08006fb4  000207cc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001bfa1  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000300c  00000000  00000000  0003c0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001348  00000000  00000000  0003f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000efe  00000000  00000000  00040438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003b4c6  00000000  00000000  00041336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001a229  00000000  00000000  0007c7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001846b9  00000000  00000000  00096a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005254  00000000  00000000  0021b0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  00220334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006e7c 	.word	0x08006e7c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006e7c 	.word	0x08006e7c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <AHT20_Init>:
/*
 * Initializes the AHT20 Module.
 * NOTE: At least 40ms must have transpired between power on
 * and this function being called
 */
bool AHT20_Init(I2C_HandleTypeDef *hi2c, uint32_t timeout) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af02      	add	r7, sp, #8
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;	//I2C Transmit Status
	uint8_t outMsg[3] = {AHT20_INITIALIZE_REG, 0x08, 0x00}; // Initialization Message
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <AHT20_Init+0x54>)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	4611      	mov	r1, r2
 8000714:	8019      	strh	r1, [r3, #0]
 8000716:	3302      	adds	r3, #2
 8000718:	0c12      	lsrs	r2, r2, #16
 800071a:	701a      	strb	r2, [r3, #0]

	// Send the Initialization Message
	ret = HAL_I2C_Master_Transmit(hi2c, AHT20_I2C_ADDR_WRITE, outMsg, 3, timeout);
 800071c:	f107 020c 	add.w	r2, r7, #12
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2303      	movs	r3, #3
 8000726:	2170      	movs	r1, #112	; 0x70
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f001 fe33 	bl	8002394 <HAL_I2C_Master_Transmit>
 800072e:	4603      	mov	r3, r0
 8000730:	73fb      	strb	r3, [r7, #15]

	if (ret != HAL_OK) {
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <AHT20_Init+0x40>
		AHT20_Initialized = false;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <AHT20_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	e002      	b.n	8000746 <AHT20_Init+0x46>
	}
	else {
		AHT20_Initialized = true;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <AHT20_Init+0x58>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
	}

	return AHT20_Initialized;
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <AHT20_Init+0x58>)
 8000748:	781b      	ldrb	r3, [r3, #0]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08006e94 	.word	0x08006e94
 8000758:	240000ec 	.word	0x240000ec
 800075c:	00000000 	.word	0x00000000

08000760 <AHT20_Get_Data>:
/*
 * Returns a struct containing the temperature and relative humidity data from
 * the AHT20 module. NOTE: This is currently a blocking function that will block
 * execution for about 85ms
 */
struct AHT20_Data AHT20_Get_Data(I2C_HandleTypeDef *hi2c, uint32_t timeout) {
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b08f      	sub	sp, #60	; 0x3c
 8000764:	af02      	add	r7, sp, #8
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;	// I2C Receipt Status
	uint8_t inMsg[7];		// Message to be received
	uint8_t outMsg[3] = {AHT20_MEASURE_TRIGGER_REG, 0x33, 0x00}; // Take Measurement Command
 800076c:	4a6c      	ldr	r2, [pc, #432]	; (8000920 <AHT20_Get_Data+0x1c0>)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	6812      	ldr	r2, [r2, #0]
 8000774:	4611      	mov	r1, r2
 8000776:	8019      	strh	r1, [r3, #0]
 8000778:	3302      	adds	r3, #2
 800077a:	0c12      	lsrs	r2, r2, #16
 800077c:	701a      	strb	r2, [r3, #0]
	uint32_t rawData;

	struct AHT20_Data newData;
	newData.temperature = 0x0;
 800077e:	f04f 0300 	mov.w	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
	newData.humidity = 0x0;
 8000784:	f04f 0300 	mov.w	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
	newData.valid = AHT20_INVALID;
 800078a:	2300      	movs	r3, #0
 800078c:	763b      	strb	r3, [r7, #24]

	if (!AHT20_Initialized) {
 800078e:	4b65      	ldr	r3, [pc, #404]	; (8000924 <AHT20_Get_Data+0x1c4>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	f083 0301 	eor.w	r3, r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00a      	beq.n	80007b2 <AHT20_Get_Data+0x52>
		newData.valid = AHT20_NOT_INITIALIZED;
 800079c:	2302      	movs	r3, #2
 800079e:	763b      	strb	r3, [r7, #24]
		return newData;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	461c      	mov	r4, r3
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007b0:	e0a7      	b.n	8000902 <AHT20_Get_Data+0x1a2>
	}

	// Send Take Measurement Command
	ret = HAL_I2C_Master_Transmit(hi2c, AHT20_I2C_ADDR_WRITE, outMsg, 3, timeout);
 80007b2:	f107 021c 	add.w	r2, r7, #28
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2303      	movs	r3, #3
 80007bc:	2170      	movs	r1, #112	; 0x70
 80007be:	68b8      	ldr	r0, [r7, #8]
 80007c0:	f001 fde8 	bl	8002394 <HAL_I2C_Master_Transmit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (ret != HAL_OK) {
 80007ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00a      	beq.n	80007e8 <AHT20_Get_Data+0x88>
		newData.valid = AHT20_MEASUREMENT_SEND_FAIL;
 80007d2:	2303      	movs	r3, #3
 80007d4:	763b      	strb	r3, [r7, #24]
		return newData;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	461c      	mov	r4, r3
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007e6:	e08c      	b.n	8000902 <AHT20_Get_Data+0x1a2>
	}

	HAL_Delay(80);
 80007e8:	2050      	movs	r0, #80	; 0x50
 80007ea:	f000 fe19 	bl	8001420 <HAL_Delay>

	// Fetch Measurement
	ret = HAL_I2C_Master_Receive(hi2c, AHT20_I2C_ADDR_READ, inMsg, 7, timeout);
 80007ee:	f107 0220 	add.w	r2, r7, #32
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2307      	movs	r3, #7
 80007f8:	2171      	movs	r1, #113	; 0x71
 80007fa:	68b8      	ldr	r0, [r7, #8]
 80007fc:	f001 febe 	bl	800257c <HAL_I2C_Master_Receive>
 8000800:	4603      	mov	r3, r0
 8000802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (ret != HAL_OK) {
 8000806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00a      	beq.n	8000824 <AHT20_Get_Data+0xc4>
		newData.valid = AHT20_MEASUREMENT_GET_FAIL;
 800080e:	2304      	movs	r3, #4
 8000810:	763b      	strb	r3, [r7, #24]
		return newData;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	461c      	mov	r4, r3
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800081e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000822:	e06e      	b.n	8000902 <AHT20_Get_Data+0x1a2>
	}

	// If Data is NOT updated
	if ((inMsg[0] & 0b10000000) == 0b10000000) {
 8000824:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000828:	b25b      	sxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	da0a      	bge.n	8000844 <AHT20_Get_Data+0xe4>
		newData.valid = AHT20_INVALID;
 800082e:	2300      	movs	r3, #0
 8000830:	763b      	strb	r3, [r7, #24]
		return newData;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	461c      	mov	r4, r3
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800083e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000842:	e05e      	b.n	8000902 <AHT20_Get_Data+0x1a2>
	}

	// If Data is NOT calibrated
	if ((inMsg[0] & 0b00001000) != 0b00001000) {
 8000844:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000848:	f003 0308 	and.w	r3, r3, #8
 800084c:	2b00      	cmp	r3, #0
 800084e:	d10a      	bne.n	8000866 <AHT20_Get_Data+0x106>
		newData.valid = AHT20_NOT_INITIALIZED;
 8000850:	2302      	movs	r3, #2
 8000852:	763b      	strb	r3, [r7, #24]
		return newData;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	461c      	mov	r4, r3
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000864:	e04d      	b.n	8000902 <AHT20_Get_Data+0x1a2>
	}

	rawData = (inMsg[3] & 0b00001111) << 16;
 8000866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800086a:	041b      	lsls	r3, r3, #16
 800086c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
	rawData |= (inMsg[4] << 8);
 8000872:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	461a      	mov	r2, r3
 800087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087c:	4313      	orrs	r3, r2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
	rawData |= (inMsg[5]);
 8000880:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000884:	461a      	mov	r2, r3
 8000886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000888:	4313      	orrs	r3, r2
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
	newData.temperature = ((float)rawData * AHT20_TEMP_CONVERSION_FACTOR) - 50.0;
 800088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088e:	ee07 3a90 	vmov	s15, r3
 8000892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000896:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800089a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000910 <AHT20_Get_Data+0x1b0>
 800089e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008a2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000918 <AHT20_Get_Data+0x1b8>
 80008a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80008aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ae:	edc7 7a04 	vstr	s15, [r7, #16]

	rawData = (inMsg[1] << 12);
 80008b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80008b6:	031b      	lsls	r3, r3, #12
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
	rawData |= (inMsg[2] << 4);
 80008ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	461a      	mov	r2, r3
 80008c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c4:	4313      	orrs	r3, r2
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
	rawData |= (inMsg[3] >> 4);
 80008c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008cc:	091b      	lsrs	r3, r3, #4
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d4:	4313      	orrs	r3, r2
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28

	newData.humidity = (float)rawData / (float)AHT20_HUMID_CONVERSION_FACTOR;
 80008d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008da:	ee07 3a90 	vmov	s15, r3
 80008de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008e2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000928 <AHT20_Get_Data+0x1c8>
 80008e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ea:	edc7 7a05 	vstr	s15, [r7, #20]

	newData.valid = AHT20_VALID;
 80008ee:	2301      	movs	r3, #1
 80008f0:	763b      	strb	r3, [r7, #24]

	return newData;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	461c      	mov	r4, r3
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	3734      	adds	r7, #52	; 0x34
 8000906:	46bd      	mov	sp, r7
 8000908:	bd90      	pop	{r4, r7, pc}
 800090a:	bf00      	nop
 800090c:	f3af 8000 	nop.w
 8000910:	f8c8d20a 	.word	0xf8c8d20a
 8000914:	3f28ffff 	.word	0x3f28ffff
 8000918:	00000000 	.word	0x00000000
 800091c:	40490000 	.word	0x40490000
 8000920:	08006e98 	.word	0x08006e98
 8000924:	240000ec 	.word	0x240000ec
 8000928:	49800000 	.word	0x49800000

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000936:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000938:	bf00      	nop
 800093a:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <main+0xe4>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d004      	beq.n	8000950 <main+0x24>
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	617a      	str	r2, [r7, #20]
 800094c:	2b00      	cmp	r3, #0
 800094e:	dcf4      	bgt.n	800093a <main+0xe>
  if ( timeout < 0 )
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	2b00      	cmp	r3, #0
 8000954:	da01      	bge.n	800095a <main+0x2e>
  {
  Error_Handler();
 8000956:	f000 fa4b 	bl	8000df0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fccf 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f85b 	bl	8000a18 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <main+0xe4>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <main+0xe4>)
 800096a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <main+0xe4>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fc49 	bl	8002218 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000986:	2100      	movs	r1, #0
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fc5f 	bl	800224c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800098e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000992:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000994:	bf00      	nop
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <main+0xe4>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <main+0x80>
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	1e5a      	subs	r2, r3, #1
 80009a6:	617a      	str	r2, [r7, #20]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	dcf4      	bgt.n	8000996 <main+0x6a>
if ( timeout < 0 )
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	da01      	bge.n	80009b6 <main+0x8a>
{
Error_Handler();
 80009b2:	f000 fa1d 	bl	8000df0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 f9b5 	bl	8000d24 <MX_GPIO_Init>
  MX_ETH_Init();
 80009ba:	f000 f8a9 	bl	8000b10 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009be:	f000 f933 	bl	8000c28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009c2:	f000 f97d 	bl	8000cc0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80009c6:	f000 f8ef 	bl	8000ba8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(45);
 80009ca:	202d      	movs	r0, #45	; 0x2d
 80009cc:	f000 fd28 	bl	8001420 <HAL_Delay>
  AHT20_Init(&hi2c1, HAL_MAX_DELAY);
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	480f      	ldr	r0, [pc, #60]	; (8000a14 <main+0xe8>)
 80009d6:	f7ff fe93 	bl	8000700 <AHT20_Init>
  HAL_Delay(20);
 80009da:	2014      	movs	r0, #20
 80009dc:	f000 fd20 	bl	8001420 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AHT20_data = AHT20_Get_Data(&hi2c1, HAL_MAX_DELAY);
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	490a      	ldr	r1, [pc, #40]	; (8000a14 <main+0xe8>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff feb8 	bl	8000760 <AHT20_Get_Data>

	  if (AHT20_data.humidity == 0.0) {
 80009f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80009f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fc:	d102      	bne.n	8000a04 <main+0xd8>
		  AHT20_data.humidity = 2.0;
 80009fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a02:	60fb      	str	r3, [r7, #12]
	  }
	  HAL_Delay(500);
 8000a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a08:	f000 fd0a 	bl	8001420 <HAL_Delay>
	  AHT20_data = AHT20_Get_Data(&hi2c1, HAL_MAX_DELAY);
 8000a0c:	e7e8      	b.n	80009e0 <main+0xb4>
 8000a0e:	bf00      	nop
 8000a10:	58024400 	.word	0x58024400
 8000a14:	240001d8 	.word	0x240001d8

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b09c      	sub	sp, #112	; 0x70
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	224c      	movs	r2, #76	; 0x4c
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f006 f9fc 	bl	8006e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2220      	movs	r2, #32
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f006 f9f6 	bl	8006e24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a38:	2004      	movs	r0, #4
 8000a3a:	f002 faed 	bl	8003018 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <SystemClock_Config+0xf0>)
 8000a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a46:	4a30      	ldr	r2, [pc, #192]	; (8000b08 <SystemClock_Config+0xf0>)
 8000a48:	f023 0301 	bic.w	r3, r3, #1
 8000a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <SystemClock_Config+0xf0>)
 8000a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <SystemClock_Config+0xf4>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a60:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <SystemClock_Config+0xf4>)
 8000a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <SystemClock_Config+0xf4>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a74:	bf00      	nop
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <SystemClock_Config+0xf4>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a82:	d1f8      	bne.n	8000a76 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a92:	2302      	movs	r3, #2
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000a9a:	233c      	movs	r3, #60	; 0x3c
 8000a9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aaa:	230c      	movs	r3, #12
 8000aac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 fb16 	bl	80030ec <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ac6:	f000 f993 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	233f      	movs	r3, #63	; 0x3f
 8000acc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ade:	2340      	movs	r3, #64	; 0x40
 8000ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2102      	movs	r1, #2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 ff2a 	bl	8003948 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000afa:	f000 f979 	bl	8000df0 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3770      	adds	r7, #112	; 0x70
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	58000400 	.word	0x58000400
 8000b0c:	58024800 	.word	0x58024800

08000b10 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <MX_ETH_Init+0x80>)
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <MX_ETH_Init+0x84>)
 8000b18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_ETH_Init+0x88>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_ETH_Init+0x88>)
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_ETH_Init+0x88>)
 8000b28:	22e1      	movs	r2, #225	; 0xe1
 8000b2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_ETH_Init+0x88>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_ETH_Init+0x88>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_ETH_Init+0x88>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_ETH_Init+0x80>)
 8000b40:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <MX_ETH_Init+0x88>)
 8000b42:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_ETH_Init+0x80>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_ETH_Init+0x80>)
 8000b4c:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <MX_ETH_Init+0x8c>)
 8000b4e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_ETH_Init+0x80>)
 8000b52:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <MX_ETH_Init+0x90>)
 8000b54:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_ETH_Init+0x80>)
 8000b58:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b5c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_ETH_Init+0x80>)
 8000b60:	f000 fd86 	bl	8001670 <HAL_ETH_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b6a:	f000 f941 	bl	8000df0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b6e:	2238      	movs	r2, #56	; 0x38
 8000b70:	2100      	movs	r1, #0
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_ETH_Init+0x94>)
 8000b74:	f006 f956 	bl	8006e24 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_ETH_Init+0x94>)
 8000b7a:	2221      	movs	r2, #33	; 0x21
 8000b7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_ETH_Init+0x94>)
 8000b80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_ETH_Init+0x94>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	24000128 	.word	0x24000128
 8000b94:	40028000 	.word	0x40028000
 8000b98:	240007c0 	.word	0x240007c0
 8000b9c:	24000070 	.word	0x24000070
 8000ba0:	24000010 	.word	0x24000010
 8000ba4:	240000f0 	.word	0x240000f0

08000ba8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <MX_I2C1_Init+0x78>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x107075B0;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <MX_I2C1_Init+0x7c>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000be4:	f001 fb46 	bl	8002274 <HAL_I2C_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bee:	f000 f8ff 	bl	8000df0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bf6:	f002 f82f 	bl	8002c58 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f000 f8f6 	bl	8000df0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000c08:	f002 f871 	bl	8002cee <HAL_I2CEx_ConfigDigitalFilter>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f000 f8ed 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	240001d8 	.word	0x240001d8
 8000c20:	40005400 	.word	0x40005400
 8000c24:	107075b0 	.word	0x107075b0

08000c28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c2c:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c2e:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <MX_USART3_UART_Init+0x94>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c70:	4811      	ldr	r0, [pc, #68]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c72:	f004 fd5d 	bl	8005730 <HAL_UART_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c7c:	f000 f8b8 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c80:	2100      	movs	r1, #0
 8000c82:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c84:	f005 fcfa 	bl	800667c <HAL_UARTEx_SetTxFifoThreshold>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c8e:	f000 f8af 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c92:	2100      	movs	r1, #0
 8000c94:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000c96:	f005 fd2f 	bl	80066f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca0:	f000 f8a6 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_USART3_UART_Init+0x90>)
 8000ca6:	f005 fcb0 	bl	800660a <HAL_UARTEx_DisableFifoMode>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb0:	f000 f89e 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	24000224 	.word	0x24000224
 8000cbc:	40004800 	.word	0x40004800

08000cc0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc6:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ccc:	2209      	movs	r2, #9
 8000cce:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d08:	f002 f83d 	bl	8002d86 <HAL_PCD_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d12:	f000 f86d 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	240002b4 	.word	0x240002b4
 8000d20:	40080000 	.word	0x40080000

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a2e      	ldr	r2, [pc, #184]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	4a27      	ldr	r2, [pc, #156]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a18      	ldr	r2, [pc, #96]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	4a10      	ldr	r2, [pc, #64]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	4a09      	ldr	r2, [pc, #36]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_GPIO_Init+0xc8>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

}
 8000dde:	bf00      	nop
 8000de0:	371c      	adds	r7, #28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	58024400 	.word	0x58024400

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_MspInit+0x30>)
 8000e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x30>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x30>)
 8000e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	58024400 	.word	0x58024400

08000e30 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a59      	ldr	r2, [pc, #356]	; (8000fb4 <HAL_ETH_MspInit+0x184>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	f040 80ab 	bne.w	8000faa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e54:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000e56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e5a:	4a57      	ldr	r2, [pc, #348]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e64:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000e66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e6e:	623b      	str	r3, [r7, #32]
 8000e70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e72:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000e74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e78:	4a4f      	ldr	r2, [pc, #316]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000e84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e90:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000e92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e96:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea0:	4b45      	ldr	r3, [pc, #276]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b42      	ldr	r3, [pc, #264]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a39      	ldr	r2, [pc, #228]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000ef2:	f043 0302 	orr.w	r3, r3, #2
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	4a2a      	ldr	r2, [pc, #168]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <HAL_ETH_MspInit+0x188>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f26:	2332      	movs	r3, #50	; 0x32
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f36:	230b      	movs	r3, #11
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481e      	ldr	r0, [pc, #120]	; (8000fbc <HAL_ETH_MspInit+0x18c>)
 8000f42:	f000 ffb9 	bl	8001eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f46:	2386      	movs	r3, #134	; 0x86
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f56:	230b      	movs	r3, #11
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <HAL_ETH_MspInit+0x190>)
 8000f62:	f000 ffa9 	bl	8001eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f78:	230b      	movs	r3, #11
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <HAL_ETH_MspInit+0x194>)
 8000f84:	f000 ff98 	bl	8001eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9a:	230b      	movs	r3, #11
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <HAL_ETH_MspInit+0x198>)
 8000fa6:	f000 ff87 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3738      	adds	r7, #56	; 0x38
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40028000 	.word	0x40028000
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58020800 	.word	0x58020800
 8000fc0:	58020000 	.word	0x58020000
 8000fc4:	58020400 	.word	0x58020400
 8000fc8:	58021800 	.word	0x58021800

08000fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0b8      	sub	sp, #224	; 0xe0
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	22bc      	movs	r2, #188	; 0xbc
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 ff19 	bl	8006e24 <memset>
  if(hi2c->Instance==I2C1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_I2C_MspInit+0xbc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d141      	bne.n	8001080 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4618      	mov	r0, r3
 800100c:	f003 f828 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001016:	f7ff feeb 	bl	8000df0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_I2C_MspInit+0xc0>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a1a      	ldr	r2, [pc, #104]	; (800108c <HAL_I2C_MspInit+0xc0>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_I2C_MspInit+0xc0>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001038:	23c0      	movs	r3, #192	; 0xc0
 800103a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103e:	2312      	movs	r3, #18
 8001040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001050:	2304      	movs	r3, #4
 8001052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <HAL_I2C_MspInit+0xc4>)
 800105e:	f000 ff2b 	bl	8001eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_I2C_MspInit+0xc0>)
 8001064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001068:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_I2C_MspInit+0xc0>)
 800106a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800106e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_I2C_MspInit+0xc0>)
 8001074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	37e0      	adds	r7, #224	; 0xe0
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40005400 	.word	0x40005400
 800108c:	58024400 	.word	0x58024400
 8001090:	58020400 	.word	0x58020400

08001094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0b8      	sub	sp, #224	; 0xe0
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	22bc      	movs	r2, #188	; 0xbc
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 feb5 	bl	8006e24 <memset>
  if(huart->Instance==USART3)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <HAL_UART_MspInit+0xc0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d142      	bne.n	800114a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010c4:	2302      	movs	r3, #2
 80010c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 ffc4 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010de:	f7ff fe87 	bl	8000df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_UART_MspInit+0xc4>)
 80010e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <HAL_UART_MspInit+0xc4>)
 80010ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_UART_MspInit+0xc4>)
 80010f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_UART_MspInit+0xc4>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001106:	4a14      	ldr	r2, [pc, #80]	; (8001158 <HAL_UART_MspInit+0xc4>)
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_UART_MspInit+0xc4>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800111e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001122:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001138:	2307      	movs	r3, #7
 800113a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_UART_MspInit+0xc8>)
 8001146:	f000 feb7 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	37e0      	adds	r7, #224	; 0xe0
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40004800 	.word	0x40004800
 8001158:	58024400 	.word	0x58024400
 800115c:	58020c00 	.word	0x58020c00

08001160 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0b8      	sub	sp, #224	; 0xe0
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	22bc      	movs	r2, #188	; 0xbc
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f005 fe4f 	bl	8006e24 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <HAL_PCD_MspInit+0xe8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d156      	bne.n	800123e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001190:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001194:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001196:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800119a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 ff5c 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80011ae:	f7ff fe1f 	bl	8000df0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011b2:	f001 ff8b 	bl	80030cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <HAL_PCD_MspInit+0xec>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	4a23      	ldr	r2, [pc, #140]	; (800124c <HAL_PCD_MspInit+0xec>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <HAL_PCD_MspInit+0xec>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011d4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80011d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011ee:	230a      	movs	r3, #10
 80011f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f8:	4619      	mov	r1, r3
 80011fa:	4815      	ldr	r0, [pc, #84]	; (8001250 <HAL_PCD_MspInit+0xf0>)
 80011fc:	f000 fe5c 	bl	8001eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <HAL_PCD_MspInit+0xf0>)
 800121c:	f000 fe4c 	bl	8001eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_PCD_MspInit+0xec>)
 8001222:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_PCD_MspInit+0xec>)
 8001228:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800122c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_PCD_MspInit+0xec>)
 8001232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	37e0      	adds	r7, #224	; 0xe0
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40080000 	.word	0x40080000
 800124c:	58024400 	.word	0x58024400
 8001250:	58020000 	.word	0x58020000

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler+0x4>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler+0x4>

08001272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a0:	f000 f89e 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012ac:	f7ff f992 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012b2:	490d      	ldr	r1, [pc, #52]	; (80012e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c8:	4c0a      	ldr	r4, [pc, #40]	; (80012f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d6:	f005 fdad 	bl	8006e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012da:	f7ff fb27 	bl	800092c <main>
  bx  lr
 80012de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012e8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012ec:	08006ee4 	.word	0x08006ee4
  ldr r2, =_sbss
 80012f0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80012f4:	240007cc 	.word	0x240007cc

080012f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC3_IRQHandler>
	...

080012fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001302:	2003      	movs	r0, #3
 8001304:	f000 f982 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001308:	f002 fcd4 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 800130c:	4602      	mov	r2, r0
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_Init+0x68>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	4913      	ldr	r1, [pc, #76]	; (8001368 <HAL_Init+0x6c>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
 8001324:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_Init+0x68>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_Init+0x6c>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	fa22 f303 	lsr.w	r3, r2, r3
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <HAL_Init+0x70>)
 800133e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <HAL_Init+0x74>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f814 	bl	8001374 <HAL_InitTick>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e002      	b.n	800135c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001356:	f7ff fd51 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	58024400 	.word	0x58024400
 8001368:	08006e9c 	.word	0x08006e9c
 800136c:	24000004 	.word	0x24000004
 8001370:	24000000 	.word	0x24000000

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_InitTick+0x60>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e021      	b.n	80013cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_InitTick+0x64>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_InitTick+0x60>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fbb3 f3f1 	udiv	r3, r3, r1
 800139a:	fbb2 f3f3 	udiv	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f959 	bl	8001656 <HAL_SYSTICK_Config>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00e      	b.n	80013cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d80a      	bhi.n	80013ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f000 f931 	bl	8001622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_InitTick+0x68>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2400000c 	.word	0x2400000c
 80013d8:	24000000 	.word	0x24000000
 80013dc:	24000008 	.word	0x24000008

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	2400000c 	.word	0x2400000c
 8001404:	240007c8 	.word	0x240007c8

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	240007c8 	.word	0x240007c8

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_Delay+0x44>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001446:	bf00      	nop
 8001448:	f7ff ffde 	bl	8001408 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2400000c 	.word	0x2400000c

08001468 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetREVID+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	0c1b      	lsrs	r3, r3, #16
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	5c001000 	.word	0x5c001000

08001480 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001490:	4904      	ldr	r1, [pc, #16]	; (80014a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	58000400 	.word	0x58000400

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <__NVIC_SetPriorityGrouping+0x40>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x40>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00
 80014ec:	05fa0000 	.word	0x05fa0000

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	; (800155c <__NVIC_SetPriority+0x50>)
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
         );
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f7ff ff8e 	bl	800150c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff47 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff5e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff90 	bl	8001560 <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5f 	bl	800150c <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffb2 	bl	80015c8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0cf      	b.n	8001822 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001688:	2b00      	cmp	r3, #0
 800168a:	d106      	bne.n	800169a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2223      	movs	r2, #35	; 0x23
 8001690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fbcb 	bl	8000e30 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b64      	ldr	r3, [pc, #400]	; (800182c <HAL_ETH_Init+0x1bc>)
 800169c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a0:	4a62      	ldr	r2, [pc, #392]	; (800182c <HAL_ETH_Init+0x1bc>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016aa:	4b60      	ldr	r3, [pc, #384]	; (800182c <HAL_ETH_Init+0x1bc>)
 80016ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7a1b      	ldrb	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d103      	bne.n	80016c8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff fedd 	bl	8001480 <HAL_SYSCFG_ETHInterfaceSelect>
 80016c6:	e003      	b.n	80016d0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80016c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80016cc:	f7ff fed8 	bl	8001480 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80016d0:	4b57      	ldr	r3, [pc, #348]	; (8001830 <HAL_ETH_Init+0x1c0>)
 80016d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016ec:	f7ff fe8c 	bl	8001408 <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016f2:	e011      	b.n	8001718 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016f4:	f7ff fe88 	bl	8001408 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001702:	d909      	bls.n	8001718 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2204      	movs	r2, #4
 8001708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	22e0      	movs	r2, #224	; 0xe0
 8001710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e084      	b.n	8001822 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1e4      	bne.n	80016f4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f886 	bl	800183c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001730:	f002 fc3a 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8001734:	4603      	mov	r3, r0
 8001736:	4a3f      	ldr	r2, [pc, #252]	; (8001834 <HAL_ETH_Init+0x1c4>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	0c9a      	lsrs	r2, r3, #18
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3a01      	subs	r2, #1
 8001744:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 fa71 	bl	8001c30 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001756:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800175a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001766:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800176a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	22e0      	movs	r2, #224	; 0xe0
 8001786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e049      	b.n	8001822 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001796:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <HAL_ETH_Init+0x1c8>)
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6952      	ldr	r2, [r2, #20]
 80017a2:	0051      	lsls	r1, r2, #1
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	430b      	orrs	r3, r1
 80017aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ae:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fad9 	bl	8001d6a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fb1f 	bl	8001dfc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	3305      	adds	r3, #5
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	021a      	lsls	r2, r3, #8
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	3303      	adds	r3, #3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	061a      	lsls	r2, r3, #24
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	3302      	adds	r3, #2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	3301      	adds	r3, #1
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800180a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800180c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2210      	movs	r2, #16
 800181c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	58024400 	.word	0x58024400
 8001830:	58000400 	.word	0x58000400
 8001834:	431bde83 	.word	0x431bde83
 8001838:	ffff8001 	.word	0xffff8001

0800183c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800184c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001854:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001856:	f002 fba7 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 800185a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d908      	bls.n	8001876 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d804      	bhi.n	8001876 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e027      	b.n	80018c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	4a18      	ldr	r2, [pc, #96]	; (80018dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d908      	bls.n	8001890 <HAL_ETH_SetMDIOClockRange+0x54>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d204      	bcs.n	8001890 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e01a      	b.n	80018c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d303      	bcc.n	80018a0 <HAL_ETH_SetMDIOClockRange+0x64>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d911      	bls.n	80018c4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d908      	bls.n	80018ba <HAL_ETH_SetMDIOClockRange+0x7e>
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <HAL_ETH_SetMDIOClockRange+0xac>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d804      	bhi.n	80018ba <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e005      	b.n	80018c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e000      	b.n	80018c6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80018c4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	01312cff 	.word	0x01312cff
 80018dc:	02160ebf 	.word	0x02160ebf
 80018e0:	03938700 	.word	0x03938700
 80018e4:	05f5e0ff 	.word	0x05f5e0ff
 80018e8:	08f0d17f 	.word	0x08f0d17f

080018ec <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80018fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	791b      	ldrb	r3, [r3, #4]
 8001904:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001906:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	7b1b      	ldrb	r3, [r3, #12]
 800190c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800190e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	7b5b      	ldrb	r3, [r3, #13]
 8001914:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001916:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7b9b      	ldrb	r3, [r3, #14]
 800191c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800191e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	7bdb      	ldrb	r3, [r3, #15]
 8001924:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001926:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	7c12      	ldrb	r2, [r2, #16]
 800192c:	2a00      	cmp	r2, #0
 800192e:	d102      	bne.n	8001936 <ETH_SetMACConfig+0x4a>
 8001930:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001934:	e000      	b.n	8001938 <ETH_SetMACConfig+0x4c>
 8001936:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001938:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	7c52      	ldrb	r2, [r2, #17]
 800193e:	2a00      	cmp	r2, #0
 8001940:	d102      	bne.n	8001948 <ETH_SetMACConfig+0x5c>
 8001942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001946:	e000      	b.n	800194a <ETH_SetMACConfig+0x5e>
 8001948:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800194a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	7c9b      	ldrb	r3, [r3, #18]
 8001950:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001952:	431a      	orrs	r2, r3
               macconf->Speed |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001958:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800195e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	7f1b      	ldrb	r3, [r3, #28]
 8001964:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001966:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	7f5b      	ldrb	r3, [r3, #29]
 800196c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800196e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	7f92      	ldrb	r2, [r2, #30]
 8001974:	2a00      	cmp	r2, #0
 8001976:	d102      	bne.n	800197e <ETH_SetMACConfig+0x92>
 8001978:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197c:	e000      	b.n	8001980 <ETH_SetMACConfig+0x94>
 800197e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001980:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	7fdb      	ldrb	r3, [r3, #31]
 8001986:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001988:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001990:	2a00      	cmp	r2, #0
 8001992:	d102      	bne.n	800199a <ETH_SetMACConfig+0xae>
 8001994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001998:	e000      	b.n	800199c <ETH_SetMACConfig+0xb0>
 800199a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800199c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80019ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b56      	ldr	r3, [pc, #344]	; (8001b18 <ETH_SetMACConfig+0x22c>)
 80019be:	4013      	ands	r3, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	430b      	orrs	r3, r1
 80019c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80019f4:	2a00      	cmp	r2, #0
 80019f6:	d102      	bne.n	80019fe <ETH_SetMACConfig+0x112>
 80019f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019fc:	e000      	b.n	8001a00 <ETH_SetMACConfig+0x114>
 80019fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a00:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <ETH_SetMACConfig+0x230>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a24:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <ETH_SetMACConfig+0x234>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	430b      	orrs	r3, r1
 8001a40:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a48:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a56:	2a00      	cmp	r2, #0
 8001a58:	d101      	bne.n	8001a5e <ETH_SetMACConfig+0x172>
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	e000      	b.n	8001a60 <ETH_SetMACConfig+0x174>
 8001a5e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a60:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a66:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a72:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001a76:	4013      	ands	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	68f9      	ldr	r1, [r7, #12]
 8001a7e:	430b      	orrs	r3, r1
 8001a80:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001a88:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001a90:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	f023 0103 	bic.w	r1, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001ab6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d101      	bne.n	8001ada <ETH_SetMACConfig+0x1ee>
 8001ad6:	2240      	movs	r2, #64	; 0x40
 8001ad8:	e000      	b.n	8001adc <ETH_SetMACConfig+0x1f0>
 8001ada:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001adc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001ae4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001aee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001afc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	00048083 	.word	0x00048083
 8001b1c:	c0f88000 	.word	0xc0f88000
 8001b20:	fffffef0 	.word	0xfffffef0

08001b24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <ETH_SetDMAConfig+0xf8>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	6811      	ldr	r1, [r2, #0]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b4a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	791b      	ldrb	r3, [r3, #4]
 8001b50:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b56:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	7b1b      	ldrb	r3, [r3, #12]
 8001b5c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <ETH_SetDMAConfig+0xfc>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	430b      	orrs	r3, r1
 8001b78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b7c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	7b5b      	ldrb	r3, [r3, #13]
 8001b82:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b94:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <ETH_SetDMAConfig+0x100>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	68f9      	ldr	r1, [r7, #12]
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ba8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	7d1b      	ldrb	r3, [r3, #20]
 8001bb4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bb6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	7f5b      	ldrb	r3, [r3, #29]
 8001bbc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <ETH_SetDMAConfig+0x104>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	68f9      	ldr	r1, [r7, #12]
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bde:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	7f1b      	ldrb	r3, [r3, #28]
 8001be6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <ETH_SetDMAConfig+0x108>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c0c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	ffff87fd 	.word	0xffff87fd
 8001c20:	ffff2ffe 	.word	0xffff2ffe
 8001c24:	fffec000 	.word	0xfffec000
 8001c28:	ffc0efef 	.word	0xffc0efef
 8001c2c:	7fc0ffff 	.word	0x7fc0ffff

08001c30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0a4      	sub	sp, #144	; 0x90
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c70:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001c88:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001c8c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001caa:	2300      	movs	r3, #0
 8001cac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001cda:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ce0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ce4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fde6 	bl	80018ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d24:	2301      	movs	r3, #1
 8001d26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d50:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fee1 	bl	8001b24 <ETH_SetDMAConfig>
}
 8001d62:	bf00      	nop
 8001d64:	3790      	adds	r7, #144	; 0x90
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	e01d      	b.n	8001db4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68d9      	ldr	r1, [r3, #12]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2200      	movs	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	3206      	adds	r2, #6
 8001daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3301      	adds	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d9de      	bls.n	8001d78 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2303      	movs	r3, #3
 8001dcc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ddc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e023      	b.n	8001e52 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6919      	ldr	r1, [r3, #16]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2200      	movs	r2, #0
 8001e26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	3212      	adds	r2, #18
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d9d8      	bls.n	8001e0a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2303      	movs	r3, #3
 8001e82:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e92:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ec6:	4b89      	ldr	r3, [pc, #548]	; (80020ec <HAL_GPIO_Init+0x234>)
 8001ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eca:	e194      	b.n	80021f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8186 	beq.w	80021f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d005      	beq.n	8001efc <HAL_GPIO_Init+0x44>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d017      	beq.n	8001f9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d123      	bne.n	8001fee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	69b9      	ldr	r1, [r7, #24]
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0203 	and.w	r2, r3, #3
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80e0 	beq.w	80021f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002030:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <HAL_GPIO_Init+0x238>)
 8002032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002036:	4a2e      	ldr	r2, [pc, #184]	; (80020f0 <HAL_GPIO_Init+0x238>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002040:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_GPIO_Init+0x238>)
 8002042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204e:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <HAL_GPIO_Init+0x23c>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <HAL_GPIO_Init+0x240>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d052      	beq.n	8002120 <HAL_GPIO_Init+0x268>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_GPIO_Init+0x244>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d031      	beq.n	80020e6 <HAL_GPIO_Init+0x22e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <HAL_GPIO_Init+0x248>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02b      	beq.n	80020e2 <HAL_GPIO_Init+0x22a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_GPIO_Init+0x24c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d025      	beq.n	80020de <HAL_GPIO_Init+0x226>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <HAL_GPIO_Init+0x250>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <HAL_GPIO_Init+0x222>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <HAL_GPIO_Init+0x254>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x21e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1a      	ldr	r2, [pc, #104]	; (8002110 <HAL_GPIO_Init+0x258>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x21a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_GPIO_Init+0x25c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x216>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a18      	ldr	r2, [pc, #96]	; (8002118 <HAL_GPIO_Init+0x260>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x212>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_GPIO_Init+0x264>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x20e>
 80020c2:	2309      	movs	r3, #9
 80020c4:	e02d      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020c6:	230a      	movs	r3, #10
 80020c8:	e02b      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020ca:	2308      	movs	r3, #8
 80020cc:	e029      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e027      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020d2:	2306      	movs	r3, #6
 80020d4:	e025      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020d6:	2305      	movs	r3, #5
 80020d8:	e023      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020da:	2304      	movs	r3, #4
 80020dc:	e021      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020de:	2303      	movs	r3, #3
 80020e0:	e01f      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e01d      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e01b      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020ea:	bf00      	nop
 80020ec:	58000080 	.word	0x58000080
 80020f0:	58024400 	.word	0x58024400
 80020f4:	58000400 	.word	0x58000400
 80020f8:	58020000 	.word	0x58020000
 80020fc:	58020400 	.word	0x58020400
 8002100:	58020800 	.word	0x58020800
 8002104:	58020c00 	.word	0x58020c00
 8002108:	58021000 	.word	0x58021000
 800210c:	58021400 	.word	0x58021400
 8002110:	58021800 	.word	0x58021800
 8002114:	58021c00 	.word	0x58021c00
 8002118:	58022000 	.word	0x58022000
 800211c:	58022400 	.word	0x58022400
 8002120:	2300      	movs	r3, #0
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	f002 0203 	and.w	r2, r2, #3
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	4093      	lsls	r3, r2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002132:	4938      	ldr	r1, [pc, #224]	; (8002214 <HAL_GPIO_Init+0x35c>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	3301      	adds	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	f47f ae63 	bne.w	8001ecc <HAL_GPIO_Init+0x14>
  }
}
 8002206:	bf00      	nop
 8002208:	bf00      	nop
 800220a:	3724      	adds	r7, #36	; 0x24
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	58000400 	.word	0x58000400

08002218 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002220:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_HSEM_FastTake+0x2c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3320      	adds	r3, #32
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_HSEM_FastTake+0x30>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	e000      	b.n	8002236 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	58026400 	.word	0x58026400
 8002248:	80000300 	.word	0x80000300

0800224c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002256:	4906      	ldr	r1, [pc, #24]	; (8002270 <HAL_HSEM_Release+0x24>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	58026400 	.word	0x58026400

08002274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07f      	b.n	8002386 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe fe96 	bl	8000fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	; 0x24
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d107      	bne.n	80022ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	e006      	b.n	80022fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d104      	bne.n	800230e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800230c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_I2C_Init+0x11c>)
 800231a:	430b      	orrs	r3, r1
 800231c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800232c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69d9      	ldr	r1, [r3, #28]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	02008000 	.word	0x02008000

08002394 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	460b      	mov	r3, r1
 80023a2:	817b      	strh	r3, [r7, #10]
 80023a4:	4613      	mov	r3, r2
 80023a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	f040 80da 	bne.w	800256a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_I2C_Master_Transmit+0x30>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e0d3      	b.n	800256c <HAL_I2C_Master_Transmit+0x1d8>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023cc:	f7ff f81c 	bl	8001408 <HAL_GetTick>
 80023d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2319      	movs	r3, #25
 80023d8:	2201      	movs	r2, #1
 80023da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f9e6 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0be      	b.n	800256c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2221      	movs	r2, #33	; 0x21
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2210      	movs	r2, #16
 80023fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	893a      	ldrh	r2, [r7, #8]
 800240e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	2bff      	cmp	r3, #255	; 0xff
 800241e:	d90e      	bls.n	800243e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	22ff      	movs	r2, #255	; 0xff
 8002424:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	b2da      	uxtb	r2, r3
 800242c:	8979      	ldrh	r1, [r7, #10]
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <HAL_I2C_Master_Transmit+0x1e0>)
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fbdc 	bl	8002bf4 <I2C_TransferConfig>
 800243c:	e06c      	b.n	8002518 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	b2da      	uxtb	r2, r3
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	4b48      	ldr	r3, [pc, #288]	; (8002574 <HAL_I2C_Master_Transmit+0x1e0>)
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fbcb 	bl	8002bf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800245e:	e05b      	b.n	8002518 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	6a39      	ldr	r1, [r7, #32]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f9e3 	bl	8002830 <I2C_WaitOnTXISFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e07b      	b.n	800256c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d034      	beq.n	8002518 <HAL_I2C_Master_Transmit+0x184>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d130      	bne.n	8002518 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	2200      	movs	r2, #0
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f975 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e04d      	b.n	800256c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2bff      	cmp	r3, #255	; 0xff
 80024d8:	d90e      	bls.n	80024f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	22ff      	movs	r2, #255	; 0xff
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	8979      	ldrh	r1, [r7, #10]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fb7f 	bl	8002bf4 <I2C_TransferConfig>
 80024f6:	e00f      	b.n	8002518 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	b2da      	uxtb	r2, r3
 8002508:	8979      	ldrh	r1, [r7, #10]
 800250a:	2300      	movs	r3, #0
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fb6e 	bl	8002bf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d19e      	bne.n	8002460 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	6a39      	ldr	r1, [r7, #32]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f9c2 	bl	80028b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e01a      	b.n	800256c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2220      	movs	r2, #32
 800253c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_I2C_Master_Transmit+0x1e4>)
 800254a:	400b      	ands	r3, r1
 800254c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800256a:	2302      	movs	r3, #2
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	80002000 	.word	0x80002000
 8002578:	fe00e800 	.word	0xfe00e800

0800257c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	461a      	mov	r2, r3
 8002588:	460b      	mov	r3, r1
 800258a:	817b      	strh	r3, [r7, #10]
 800258c:	4613      	mov	r3, r2
 800258e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b20      	cmp	r3, #32
 800259a:	f040 80db 	bne.w	8002754 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_I2C_Master_Receive+0x30>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0d4      	b.n	8002756 <HAL_I2C_Master_Receive+0x1da>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025b4:	f7fe ff28 	bl	8001408 <HAL_GetTick>
 80025b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2319      	movs	r3, #25
 80025c0:	2201      	movs	r2, #1
 80025c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f8f2 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0bf      	b.n	8002756 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2222      	movs	r2, #34	; 0x22
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2210      	movs	r2, #16
 80025e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	893a      	ldrh	r2, [r7, #8]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	2bff      	cmp	r3, #255	; 0xff
 8002606:	d90e      	bls.n	8002626 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	22ff      	movs	r2, #255	; 0xff
 800260c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	b2da      	uxtb	r2, r3
 8002614:	8979      	ldrh	r1, [r7, #10]
 8002616:	4b52      	ldr	r3, [pc, #328]	; (8002760 <HAL_I2C_Master_Receive+0x1e4>)
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fae8 	bl	8002bf4 <I2C_TransferConfig>
 8002624:	e06d      	b.n	8002702 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	b2da      	uxtb	r2, r3
 8002636:	8979      	ldrh	r1, [r7, #10]
 8002638:	4b49      	ldr	r3, [pc, #292]	; (8002760 <HAL_I2C_Master_Receive+0x1e4>)
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fad7 	bl	8002bf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002646:	e05c      	b.n	8002702 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	6a39      	ldr	r1, [r7, #32]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f96b 	bl	8002928 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e07c      	b.n	8002756 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d034      	beq.n	8002702 <HAL_I2C_Master_Receive+0x186>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d130      	bne.n	8002702 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	2200      	movs	r2, #0
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f880 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e04d      	b.n	8002756 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2bff      	cmp	r3, #255	; 0xff
 80026c2:	d90e      	bls.n	80026e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	22ff      	movs	r2, #255	; 0xff
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	8979      	ldrh	r1, [r7, #10]
 80026d2:	2300      	movs	r3, #0
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fa8a 	bl	8002bf4 <I2C_TransferConfig>
 80026e0:	e00f      	b.n	8002702 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	8979      	ldrh	r1, [r7, #10]
 80026f4:	2300      	movs	r3, #0
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fa79 	bl	8002bf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d19d      	bne.n	8002648 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	6a39      	ldr	r1, [r7, #32]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f8cd 	bl	80028b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e01a      	b.n	8002756 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2220      	movs	r2, #32
 8002726:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_I2C_Master_Receive+0x1e8>)
 8002734:	400b      	ands	r3, r1
 8002736:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	80002400 	.word	0x80002400
 8002764:	fe00e800 	.word	0xfe00e800

08002768 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d103      	bne.n	8002786 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d007      	beq.n	80027a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	619a      	str	r2, [r3, #24]
  }
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c0:	e022      	b.n	8002808 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d01e      	beq.n	8002808 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7fe fe1d 	bl	8001408 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d113      	bne.n	8002808 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e00f      	b.n	8002828 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699a      	ldr	r2, [r3, #24]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4013      	ands	r3, r2
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	429a      	cmp	r2, r3
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	429a      	cmp	r2, r3
 8002824:	d0cd      	beq.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800283c:	e02c      	b.n	8002898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f8ea 	bl	8002a1c <I2C_IsErrorOccurred>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e02a      	b.n	80028a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d01e      	beq.n	8002898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285a:	f7fe fdd5 	bl	8001408 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	d302      	bcc.n	8002870 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d113      	bne.n	8002898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e007      	b.n	80028a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d1cb      	bne.n	800283e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028bc:	e028      	b.n	8002910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f8aa 	bl	8002a1c <I2C_IsErrorOccurred>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e026      	b.n	8002920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d2:	f7fe fd99 	bl	8001408 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d113      	bne.n	8002910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	f043 0220 	orr.w	r2, r3, #32
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e007      	b.n	8002920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b20      	cmp	r3, #32
 800291c:	d1cf      	bne.n	80028be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002934:	e064      	b.n	8002a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f86e 	bl	8002a1c <I2C_IsErrorOccurred>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e062      	b.n	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b20      	cmp	r3, #32
 8002956:	d138      	bne.n	80029ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d105      	bne.n	8002972 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e04e      	b.n	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b10      	cmp	r3, #16
 800297e:	d107      	bne.n	8002990 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2210      	movs	r2, #16
 8002986:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2204      	movs	r2, #4
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
 800298e:	e002      	b.n	8002996 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2220      	movs	r2, #32
 800299c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80029aa:	400b      	ands	r3, r1
 80029ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e022      	b.n	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ca:	f7fe fd1d 	bl	8001408 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d302      	bcc.n	80029e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10f      	bne.n	8002a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e007      	b.n	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d193      	bne.n	8002936 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	fe00e800 	.word	0xfe00e800

08002a1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d075      	beq.n	8002b34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a50:	e056      	b.n	8002b00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d052      	beq.n	8002b00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7fe fcd5 	bl	8001408 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <I2C_IsErrorOccurred+0x54>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d147      	bne.n	8002b00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a92:	d12e      	bne.n	8002af2 <I2C_IsErrorOccurred+0xd6>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a9a:	d02a      	beq.n	8002af2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d027      	beq.n	8002af2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ab0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ab2:	f7fe fca9 	bl	8001408 <HAL_GetTick>
 8002ab6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab8:	e01b      	b.n	8002af2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002aba:	f7fe fca5 	bl	8001408 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b19      	cmp	r3, #25
 8002ac6:	d914      	bls.n	8002af2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d1dc      	bne.n	8002aba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d003      	beq.n	8002b16 <I2C_IsErrorOccurred+0xfa>
 8002b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d09d      	beq.n	8002a52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2220      	movs	r2, #32
 8002b24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	f043 0308 	orr.w	r3, r3, #8
 8002b6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01c      	beq.n	8002be4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff fddc 	bl	8002768 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <I2C_IsErrorOccurred+0x1d4>)
 8002bbc:	400b      	ands	r3, r1
 8002bbe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3728      	adds	r7, #40	; 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	fe00e800 	.word	0xfe00e800

08002bf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	4613      	mov	r3, r2
 8002c04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c0c:	7a7b      	ldrb	r3, [r7, #9]
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c14:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c22:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	0d5b      	lsrs	r3, r3, #21
 8002c2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <I2C_TransferConfig+0x60>)
 8002c34:	430b      	orrs	r3, r1
 8002c36:	43db      	mvns	r3, r3
 8002c38:	ea02 0103 	and.w	r1, r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	03ff63ff 	.word	0x03ff63ff

08002c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d138      	bne.n	8002ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e032      	b.n	8002ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2224      	movs	r2, #36	; 0x24
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d139      	bne.n	8002d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e033      	b.n	8002d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2224      	movs	r2, #36	; 0x24
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e000      	b.n	8002d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d88:	b08f      	sub	sp, #60	; 0x3c
 8002d8a:	af0a      	add	r7, sp, #40	; 0x28
 8002d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e116      	b.n	8002fc6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe f9d4 	bl	8001160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2203      	movs	r2, #3
 8002dbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 fd88 	bl	80068ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	687e      	ldr	r6, [r7, #4]
 8002de4:	466d      	mov	r5, sp
 8002de6:	f106 0410 	add.w	r4, r6, #16
 8002dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002df6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dfa:	1d33      	adds	r3, r6, #4
 8002dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dfe:	6838      	ldr	r0, [r7, #0]
 8002e00:	f003 fd06 	bl	8006810 <USB_CoreInit>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0d7      	b.n	8002fc6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fd76 	bl	800690e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	73fb      	strb	r3, [r7, #15]
 8002e26:	e04a      	b.n	8002ebe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	333d      	adds	r3, #61	; 0x3d
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	333c      	adds	r3, #60	; 0x3c
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	b298      	uxth	r0, r3
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3344      	adds	r3, #68	; 0x44
 8002e64:	4602      	mov	r2, r0
 8002e66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	3340      	adds	r3, #64	; 0x40
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3348      	adds	r3, #72	; 0x48
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	334c      	adds	r3, #76	; 0x4c
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3354      	adds	r3, #84	; 0x54
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d3af      	bcc.n	8002e28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	e044      	b.n	8002f58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	3301      	adds	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d3b5      	bcc.n	8002ece <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	687e      	ldr	r6, [r7, #4]
 8002f6a:	466d      	mov	r5, sp
 8002f6c:	f106 0410 	add.w	r4, r6, #16
 8002f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f80:	1d33      	adds	r3, r6, #4
 8002f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f84:	6838      	ldr	r0, [r7, #0]
 8002f86:	f003 fd0f 	bl	80069a8 <USB_DevInit>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e014      	b.n	8002fc6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f80b 	bl	8002fd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fecd 	bl	8006d5e <USB_DevDisconnect>

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002fd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_PCDEx_ActivateLPM+0x44>)
 8003000:	4313      	orrs	r3, r2
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	10000003 	.word	0x10000003

08003018 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003020:	4b29      	ldr	r3, [pc, #164]	; (80030c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	2b06      	cmp	r3, #6
 800302a:	d00a      	beq.n	8003042 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800302c:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d001      	beq.n	800303e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e040      	b.n	80030c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e03e      	b.n	80030c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800304a:	491f      	ldr	r1, [pc, #124]	; (80030c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4313      	orrs	r3, r2
 8003050:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003052:	f7fe f9d9 	bl	8001408 <HAL_GetTick>
 8003056:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003058:	e009      	b.n	800306e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800305a:	f7fe f9d5 	bl	8001408 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003068:	d901      	bls.n	800306e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e028      	b.n	80030c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800306e:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307a:	d1ee      	bne.n	800305a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b1e      	cmp	r3, #30
 8003080:	d008      	beq.n	8003094 <HAL_PWREx_ConfigSupply+0x7c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b2e      	cmp	r3, #46	; 0x2e
 8003086:	d005      	beq.n	8003094 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b1d      	cmp	r3, #29
 800308c:	d002      	beq.n	8003094 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b2d      	cmp	r3, #45	; 0x2d
 8003092:	d114      	bne.n	80030be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003094:	f7fe f9b8 	bl	8001408 <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800309a:	e009      	b.n	80030b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800309c:	f7fe f9b4 	bl	8001408 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030aa:	d901      	bls.n	80030b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d1ee      	bne.n	800309c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	58024800 	.word	0x58024800

080030cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80030d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030da:	60d3      	str	r3, [r2, #12]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	58024800 	.word	0x58024800

080030ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08c      	sub	sp, #48	; 0x30
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f000 bc1d 	b.w	800393a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8087 	beq.w	800321c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800310e:	4b99      	ldr	r3, [pc, #612]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003118:	4b96      	ldr	r3, [pc, #600]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	2b10      	cmp	r3, #16
 8003122:	d007      	beq.n	8003134 <HAL_RCC_OscConfig+0x48>
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	2b18      	cmp	r3, #24
 8003128:	d110      	bne.n	800314c <HAL_RCC_OscConfig+0x60>
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d10b      	bne.n	800314c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003134:	4b8f      	ldr	r3, [pc, #572]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d06c      	beq.n	800321a <HAL_RCC_OscConfig+0x12e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d168      	bne.n	800321a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e3f6      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003154:	d106      	bne.n	8003164 <HAL_RCC_OscConfig+0x78>
 8003156:	4b87      	ldr	r3, [pc, #540]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a86      	ldr	r2, [pc, #536]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e02e      	b.n	80031c2 <HAL_RCC_OscConfig+0xd6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <HAL_RCC_OscConfig+0x9a>
 800316c:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a80      	ldr	r2, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7d      	ldr	r2, [pc, #500]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800317e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e01d      	b.n	80031c2 <HAL_RCC_OscConfig+0xd6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800318e:	d10c      	bne.n	80031aa <HAL_RCC_OscConfig+0xbe>
 8003190:	4b78      	ldr	r3, [pc, #480]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a77      	ldr	r2, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003196:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b75      	ldr	r3, [pc, #468]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a74      	ldr	r2, [pc, #464]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e00b      	b.n	80031c2 <HAL_RCC_OscConfig+0xd6>
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a71      	ldr	r2, [pc, #452]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b6f      	ldr	r3, [pc, #444]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6e      	ldr	r2, [pc, #440]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80031bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d013      	beq.n	80031f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe f91d 	bl	8001408 <HAL_GetTick>
 80031ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d2:	f7fe f919 	bl	8001408 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b64      	cmp	r3, #100	; 0x64
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e3aa      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031e4:	4b63      	ldr	r3, [pc, #396]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0xe6>
 80031f0:	e014      	b.n	800321c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fe f909 	bl	8001408 <HAL_GetTick>
 80031f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031fa:	f7fe f905 	bl	8001408 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b64      	cmp	r3, #100	; 0x64
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e396      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800320c:	4b59      	ldr	r3, [pc, #356]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0x10e>
 8003218:	e000      	b.n	800321c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80cb 	beq.w	80033c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800322a:	4b52      	ldr	r3, [pc, #328]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003232:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003234:	4b4f      	ldr	r3, [pc, #316]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <HAL_RCC_OscConfig+0x164>
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	2b18      	cmp	r3, #24
 8003244:	d156      	bne.n	80032f4 <HAL_RCC_OscConfig+0x208>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d151      	bne.n	80032f4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003250:	4b48      	ldr	r3, [pc, #288]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_OscConfig+0x17c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e368      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003268:	4b42      	ldr	r3, [pc, #264]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 0219 	bic.w	r2, r3, #25
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	493f      	ldr	r1, [pc, #252]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800327a:	f7fe f8c5 	bl	8001408 <HAL_GetTick>
 800327e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003282:	f7fe f8c1 	bl	8001408 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e352      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003294:	4b37      	ldr	r3, [pc, #220]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	f7fe f8e2 	bl	8001468 <HAL_GetREVID>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d817      	bhi.n	80032de <HAL_RCC_OscConfig+0x1f2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b40      	cmp	r3, #64	; 0x40
 80032b4:	d108      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1dc>
 80032b6:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80032be:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c6:	e07b      	b.n	80033c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	031b      	lsls	r3, r3, #12
 80032d6:	4927      	ldr	r1, [pc, #156]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032dc:	e070      	b.n	80033c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	061b      	lsls	r3, r3, #24
 80032ec:	4921      	ldr	r1, [pc, #132]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f2:	e065      	b.n	80033c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d048      	beq.n	800338e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 0219 	bic.w	r2, r3, #25
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	491a      	ldr	r1, [pc, #104]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe f87b 	bl	8001408 <HAL_GetTick>
 8003312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003316:	f7fe f877 	bl	8001408 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e308      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003334:	f7fe f898 	bl	8001468 <HAL_GetREVID>
 8003338:	4603      	mov	r3, r0
 800333a:	f241 0203 	movw	r2, #4099	; 0x1003
 800333e:	4293      	cmp	r3, r2
 8003340:	d81a      	bhi.n	8003378 <HAL_RCC_OscConfig+0x28c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d108      	bne.n	800335c <HAL_RCC_OscConfig+0x270>
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 8003354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003358:	6053      	str	r3, [r2, #4]
 800335a:	e031      	b.n	80033c0 <HAL_RCC_OscConfig+0x2d4>
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	031b      	lsls	r3, r3, #12
 800336a:	4902      	ldr	r1, [pc, #8]	; (8003374 <HAL_RCC_OscConfig+0x288>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
 8003370:	e026      	b.n	80033c0 <HAL_RCC_OscConfig+0x2d4>
 8003372:	bf00      	nop
 8003374:	58024400 	.word	0x58024400
 8003378:	4b9a      	ldr	r3, [pc, #616]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	4997      	ldr	r1, [pc, #604]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
 800338c:	e018      	b.n	80033c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338e:	4b95      	ldr	r3, [pc, #596]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a94      	ldr	r2, [pc, #592]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fe f835 	bl	8001408 <HAL_GetTick>
 800339e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a2:	f7fe f831 	bl	8001408 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e2c2      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033b4:	4b8b      	ldr	r3, [pc, #556]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a9 	beq.w	8003520 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ce:	4b85      	ldr	r3, [pc, #532]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033d8:	4b82      	ldr	r3, [pc, #520]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d007      	beq.n	80033f4 <HAL_RCC_OscConfig+0x308>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b18      	cmp	r3, #24
 80033e8:	d13a      	bne.n	8003460 <HAL_RCC_OscConfig+0x374>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d135      	bne.n	8003460 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033f4:	4b7b      	ldr	r3, [pc, #492]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_OscConfig+0x320>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	2b80      	cmp	r3, #128	; 0x80
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e296      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800340c:	f7fe f82c 	bl	8001468 <HAL_GetREVID>
 8003410:	4603      	mov	r3, r0
 8003412:	f241 0203 	movw	r2, #4099	; 0x1003
 8003416:	4293      	cmp	r3, r2
 8003418:	d817      	bhi.n	800344a <HAL_RCC_OscConfig+0x35e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	2b20      	cmp	r3, #32
 8003420:	d108      	bne.n	8003434 <HAL_RCC_OscConfig+0x348>
 8003422:	4b70      	ldr	r3, [pc, #448]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800342a:	4a6e      	ldr	r2, [pc, #440]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 800342c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003430:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003432:	e075      	b.n	8003520 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003434:	4b6b      	ldr	r3, [pc, #428]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	069b      	lsls	r3, r3, #26
 8003442:	4968      	ldr	r1, [pc, #416]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003448:	e06a      	b.n	8003520 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800344a:	4b66      	ldr	r3, [pc, #408]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	061b      	lsls	r3, r3, #24
 8003458:	4962      	ldr	r1, [pc, #392]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800345e:	e05f      	b.n	8003520 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d042      	beq.n	80034ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003468:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a5d      	ldr	r2, [pc, #372]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 800346e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fd ffc8 	bl	8001408 <HAL_GetTick>
 8003478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800347c:	f7fd ffc4 	bl	8001408 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e255      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800348e:	4b55      	ldr	r3, [pc, #340]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800349a:	f7fd ffe5 	bl	8001468 <HAL_GetREVID>
 800349e:	4603      	mov	r3, r0
 80034a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d817      	bhi.n	80034d8 <HAL_RCC_OscConfig+0x3ec>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d108      	bne.n	80034c2 <HAL_RCC_OscConfig+0x3d6>
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034b8:	4a4a      	ldr	r2, [pc, #296]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80034ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034be:	6053      	str	r3, [r2, #4]
 80034c0:	e02e      	b.n	8003520 <HAL_RCC_OscConfig+0x434>
 80034c2:	4b48      	ldr	r3, [pc, #288]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	069b      	lsls	r3, r3, #26
 80034d0:	4944      	ldr	r1, [pc, #272]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]
 80034d6:	e023      	b.n	8003520 <HAL_RCC_OscConfig+0x434>
 80034d8:	4b42      	ldr	r3, [pc, #264]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	493f      	ldr	r1, [pc, #252]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60cb      	str	r3, [r1, #12]
 80034ec:	e018      	b.n	8003520 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034ee:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80034f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fd ff85 	bl	8001408 <HAL_GetTick>
 80034fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003502:	f7fd ff81 	bl	8001408 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e212      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003514:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d036      	beq.n	800359a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d019      	beq.n	8003568 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003534:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 8003536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003538:	4a2a      	ldr	r2, [pc, #168]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fd ff62 	bl	8001408 <HAL_GetTick>
 8003544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003548:	f7fd ff5e 	bl	8001408 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e1ef      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x45c>
 8003566:	e018      	b.n	800359a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003568:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 800356a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd ff48 	bl	8001408 <HAL_GetTick>
 8003578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357c:	f7fd ff44 	bl	8001408 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e1d5      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 8003590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d039      	beq.n	800361a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01c      	beq.n	80035e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a0c      	ldr	r2, [pc, #48]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80035b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035ba:	f7fd ff25 	bl	8001408 <HAL_GetTick>
 80035be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035c2:	f7fd ff21 	bl	8001408 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1b2      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_OscConfig+0x4f8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x4d6>
 80035e0:	e01b      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
 80035e2:	bf00      	nop
 80035e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035e8:	4b9b      	ldr	r3, [pc, #620]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a9a      	ldr	r2, [pc, #616]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80035ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035f4:	f7fd ff08 	bl	8001408 <HAL_GetTick>
 80035f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035fc:	f7fd ff04 	bl	8001408 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e195      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800360e:	4b92      	ldr	r3, [pc, #584]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8081 	beq.w	800372a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003628:	4b8c      	ldr	r3, [pc, #560]	; (800385c <HAL_RCC_OscConfig+0x770>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a8b      	ldr	r2, [pc, #556]	; (800385c <HAL_RCC_OscConfig+0x770>)
 800362e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003632:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003634:	f7fd fee8 	bl	8001408 <HAL_GetTick>
 8003638:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800363c:	f7fd fee4 	bl	8001408 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e175      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800364e:	4b83      	ldr	r3, [pc, #524]	; (800385c <HAL_RCC_OscConfig+0x770>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d106      	bne.n	8003670 <HAL_RCC_OscConfig+0x584>
 8003662:	4b7d      	ldr	r3, [pc, #500]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a7c      	ldr	r2, [pc, #496]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	e02d      	b.n	80036cc <HAL_RCC_OscConfig+0x5e0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10c      	bne.n	8003692 <HAL_RCC_OscConfig+0x5a6>
 8003678:	4b77      	ldr	r3, [pc, #476]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	4a76      	ldr	r2, [pc, #472]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	6713      	str	r3, [r2, #112]	; 0x70
 8003684:	4b74      	ldr	r3, [pc, #464]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a73      	ldr	r2, [pc, #460]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 800368a:	f023 0304 	bic.w	r3, r3, #4
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	e01c      	b.n	80036cc <HAL_RCC_OscConfig+0x5e0>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x5c8>
 800369a:	4b6f      	ldr	r3, [pc, #444]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a6e      	ldr	r2, [pc, #440]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a6b      	ldr	r2, [pc, #428]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0x5e0>
 80036b4:	4b68      	ldr	r3, [pc, #416]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a67      	ldr	r2, [pc, #412]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	4b65      	ldr	r3, [pc, #404]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a64      	ldr	r2, [pc, #400]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80036c6:	f023 0304 	bic.w	r3, r3, #4
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fd fe98 	bl	8001408 <HAL_GetTick>
 80036d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fd fe94 	bl	8001408 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e123      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036f2:	4b59      	ldr	r3, [pc, #356]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ee      	beq.n	80036dc <HAL_RCC_OscConfig+0x5f0>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fd fe82 	bl	8001408 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fd fe7e 	bl	8001408 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e10d      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800371e:	4b4e      	ldr	r3, [pc, #312]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ee      	bne.n	8003708 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8102 	beq.w	8003938 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003734:	4b48      	ldr	r3, [pc, #288]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800373c:	2b18      	cmp	r3, #24
 800373e:	f000 80bd 	beq.w	80038bc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b02      	cmp	r3, #2
 8003748:	f040 809e 	bne.w	8003888 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b42      	ldr	r3, [pc, #264]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a41      	ldr	r2, [pc, #260]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fd fe56 	bl	8001408 <HAL_GetTick>
 800375c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fd fe52 	bl	8001408 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e0e3      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800377e:	4b36      	ldr	r3, [pc, #216]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCC_OscConfig+0x774>)
 8003784:	4013      	ands	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800378e:	0112      	lsls	r2, r2, #4
 8003790:	430a      	orrs	r2, r1
 8003792:	4931      	ldr	r1, [pc, #196]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003794:	4313      	orrs	r3, r2
 8003796:	628b      	str	r3, [r1, #40]	; 0x28
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	3b01      	subs	r3, #1
 800379e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a6:	3b01      	subs	r3, #1
 80037a8:	025b      	lsls	r3, r3, #9
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	3b01      	subs	r3, #1
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	3b01      	subs	r3, #1
 80037c2:	061b      	lsls	r3, r3, #24
 80037c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037c8:	4923      	ldr	r1, [pc, #140]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	4a21      	ldr	r2, [pc, #132]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037da:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80037dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037de:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCC_OscConfig+0x778>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037e6:	00d2      	lsls	r2, r2, #3
 80037e8:	491b      	ldr	r1, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	f023 020c 	bic.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	4917      	ldr	r1, [pc, #92]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003800:	4b15      	ldr	r3, [pc, #84]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	f023 0202 	bic.w	r2, r3, #2
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	4912      	ldr	r1, [pc, #72]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 800380e:	4313      	orrs	r3, r2
 8003810:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	4a10      	ldr	r2, [pc, #64]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003834:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_RCC_OscConfig+0x76c>)
 8003848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384e:	f7fd fddb 	bl	8001408 <HAL_GetTick>
 8003852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003854:	e011      	b.n	800387a <HAL_RCC_OscConfig+0x78e>
 8003856:	bf00      	nop
 8003858:	58024400 	.word	0x58024400
 800385c:	58024800 	.word	0x58024800
 8003860:	fffffc0c 	.word	0xfffffc0c
 8003864:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003868:	f7fd fdce 	bl	8001408 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e05f      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800387a:	4b32      	ldr	r3, [pc, #200]	; (8003944 <HAL_RCC_OscConfig+0x858>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x77c>
 8003886:	e057      	b.n	8003938 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003888:	4b2e      	ldr	r3, [pc, #184]	; (8003944 <HAL_RCC_OscConfig+0x858>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <HAL_RCC_OscConfig+0x858>)
 800388e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd fdb8 	bl	8001408 <HAL_GetTick>
 8003898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389c:	f7fd fdb4 	bl	8001408 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e045      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ae:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_RCC_OscConfig+0x858>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x7b0>
 80038ba:	e03d      	b.n	8003938 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <HAL_RCC_OscConfig+0x858>)
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_RCC_OscConfig+0x858>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d031      	beq.n	8003934 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 0203 	and.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d12a      	bne.n	8003934 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d122      	bne.n	8003934 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d11a      	bne.n	8003934 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	0a5b      	lsrs	r3, r3, #9
 8003902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d111      	bne.n	8003934 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	0c1b      	lsrs	r3, r3, #16
 8003914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d108      	bne.n	8003934 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	0e1b      	lsrs	r3, r3, #24
 8003926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3730      	adds	r7, #48	; 0x30
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	58024400 	.word	0x58024400

08003948 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e19c      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800395c:	4b8a      	ldr	r3, [pc, #552]	; (8003b88 <HAL_RCC_ClockConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d910      	bls.n	800398c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b87      	ldr	r3, [pc, #540]	; (8003b88 <HAL_RCC_ClockConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 020f 	bic.w	r2, r3, #15
 8003972:	4985      	ldr	r1, [pc, #532]	; (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b83      	ldr	r3, [pc, #524]	; (8003b88 <HAL_RCC_ClockConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e184      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d010      	beq.n	80039ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	4b7b      	ldr	r3, [pc, #492]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d908      	bls.n	80039ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039a8:	4b78      	ldr	r3, [pc, #480]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	4975      	ldr	r1, [pc, #468]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d010      	beq.n	80039e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	4b70      	ldr	r3, [pc, #448]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d908      	bls.n	80039e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039d6:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	496a      	ldr	r1, [pc, #424]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d010      	beq.n	8003a16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	4b64      	ldr	r3, [pc, #400]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d908      	bls.n	8003a16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	495e      	ldr	r1, [pc, #376]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d010      	beq.n	8003a44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d908      	bls.n	8003a44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a32:	4b56      	ldr	r3, [pc, #344]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	4953      	ldr	r1, [pc, #332]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d010      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	4b4d      	ldr	r3, [pc, #308]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d908      	bls.n	8003a72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b4a      	ldr	r3, [pc, #296]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f023 020f 	bic.w	r2, r3, #15
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4947      	ldr	r1, [pc, #284]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d055      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a7e:	4b43      	ldr	r3, [pc, #268]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4940      	ldr	r1, [pc, #256]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a98:	4b3c      	ldr	r3, [pc, #240]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d121      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0f6      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d115      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0ea      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ac8:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0de      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad8:	4b2c      	ldr	r3, [pc, #176]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0d6      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ae8:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f023 0207 	bic.w	r2, r3, #7
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4925      	ldr	r1, [pc, #148]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afa:	f7fd fc85 	bl	8001408 <HAL_GetTick>
 8003afe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b02:	f7fd fc81 	bl	8001408 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0be      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b18:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d1eb      	bne.n	8003b02 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d208      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f023 020f 	bic.w	r2, r3, #15
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	490e      	ldr	r1, [pc, #56]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d214      	bcs.n	8003b90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 020f 	bic.w	r2, r3, #15
 8003b6e:	4906      	ldr	r1, [pc, #24]	; (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e086      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
 8003b88:	52002000 	.word	0x52002000
 8003b8c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	4b3f      	ldr	r3, [pc, #252]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d208      	bcs.n	8003bbe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bac:	4b3c      	ldr	r3, [pc, #240]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	4939      	ldr	r1, [pc, #228]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d208      	bcs.n	8003bec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bda:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	492e      	ldr	r1, [pc, #184]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d208      	bcs.n	8003c1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	4922      	ldr	r1, [pc, #136]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d010      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d208      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	4917      	ldr	r1, [pc, #92]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c48:	f000 f834 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	4912      	ldr	r1, [pc, #72]	; (8003ca4 <HAL_RCC_ClockConfig+0x35c>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
 8003c64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c66:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <HAL_RCC_ClockConfig+0x35c>)
 8003c70:	5cd3      	ldrb	r3, [r2, r3]
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7c:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <HAL_RCC_ClockConfig+0x360>)
 8003c7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <HAL_RCC_ClockConfig+0x364>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <HAL_RCC_ClockConfig+0x368>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd fb72 	bl	8001374 <HAL_InitTick>
 8003c90:	4603      	mov	r3, r0
 8003c92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	58024400 	.word	0x58024400
 8003ca4:	08006e9c 	.word	0x08006e9c
 8003ca8:	24000004 	.word	0x24000004
 8003cac:	24000000 	.word	0x24000000
 8003cb0:	24000008 	.word	0x24000008

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cba:	4bb3      	ldr	r3, [pc, #716]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cc2:	2b18      	cmp	r3, #24
 8003cc4:	f200 8155 	bhi.w	8003f72 <HAL_RCC_GetSysClockFreq+0x2be>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003f73 	.word	0x08003f73
 8003cd8:	08003f73 	.word	0x08003f73
 8003cdc:	08003f73 	.word	0x08003f73
 8003ce0:	08003f73 	.word	0x08003f73
 8003ce4:	08003f73 	.word	0x08003f73
 8003ce8:	08003f73 	.word	0x08003f73
 8003cec:	08003f73 	.word	0x08003f73
 8003cf0:	08003d5b 	.word	0x08003d5b
 8003cf4:	08003f73 	.word	0x08003f73
 8003cf8:	08003f73 	.word	0x08003f73
 8003cfc:	08003f73 	.word	0x08003f73
 8003d00:	08003f73 	.word	0x08003f73
 8003d04:	08003f73 	.word	0x08003f73
 8003d08:	08003f73 	.word	0x08003f73
 8003d0c:	08003f73 	.word	0x08003f73
 8003d10:	08003d61 	.word	0x08003d61
 8003d14:	08003f73 	.word	0x08003f73
 8003d18:	08003f73 	.word	0x08003f73
 8003d1c:	08003f73 	.word	0x08003f73
 8003d20:	08003f73 	.word	0x08003f73
 8003d24:	08003f73 	.word	0x08003f73
 8003d28:	08003f73 	.word	0x08003f73
 8003d2c:	08003f73 	.word	0x08003f73
 8003d30:	08003d67 	.word	0x08003d67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d34:	4b94      	ldr	r3, [pc, #592]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d40:	4b91      	ldr	r3, [pc, #580]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	08db      	lsrs	r3, r3, #3
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	4a90      	ldr	r2, [pc, #576]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d52:	e111      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d54:	4b8d      	ldr	r3, [pc, #564]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d56:	61bb      	str	r3, [r7, #24]
    break;
 8003d58:	e10e      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d5a:	4b8d      	ldr	r3, [pc, #564]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d5c:	61bb      	str	r3, [r7, #24]
    break;
 8003d5e:	e10b      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d60:	4b8c      	ldr	r3, [pc, #560]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d62:	61bb      	str	r3, [r7, #24]
    break;
 8003d64:	e108      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d66:	4b88      	ldr	r3, [pc, #544]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d70:	4b85      	ldr	r3, [pc, #532]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d7c:	4b82      	ldr	r3, [pc, #520]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d86:	4b80      	ldr	r3, [pc, #512]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	08db      	lsrs	r3, r3, #3
 8003d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 80e1 	beq.w	8003f6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	f000 8083 	beq.w	8003eb8 <HAL_RCC_GetSysClockFreq+0x204>
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	f200 80a1 	bhi.w	8003efc <HAL_RCC_GetSysClockFreq+0x248>
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x114>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d056      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003dc6:	e099      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dc8:	4b6f      	ldr	r3, [pc, #444]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d02d      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dd4:	4b6c      	ldr	r3, [pc, #432]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	08db      	lsrs	r3, r3, #3
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	4a6b      	ldr	r2, [pc, #428]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	ee07 3a90 	vmov	s15, r3
 8003dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b62      	ldr	r3, [pc, #392]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e2e:	e087      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e72:	e065      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003fa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b40      	ldr	r3, [pc, #256]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eb6:	e043      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003fa4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eca:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ede:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003efa:	e021      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003fa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	0a5b      	lsrs	r3, r3, #9
 8003f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	ee07 3a90 	vmov	s15, r3
 8003f54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f64:	ee17 3a90 	vmov	r3, s15
 8003f68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f6a:	e005      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
    break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f74:	61bb      	str	r3, [r7, #24]
    break;
 8003f76:	bf00      	nop
  }

  return sysclockfreq;
 8003f78:	69bb      	ldr	r3, [r7, #24]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	58024400 	.word	0x58024400
 8003f8c:	03d09000 	.word	0x03d09000
 8003f90:	003d0900 	.word	0x003d0900
 8003f94:	007a1200 	.word	0x007a1200
 8003f98:	46000000 	.word	0x46000000
 8003f9c:	4c742400 	.word	0x4c742400
 8003fa0:	4a742400 	.word	0x4a742400
 8003fa4:	4af42400 	.word	0x4af42400

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003fae:	f7ff fe81 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	490f      	ldr	r1, [pc, #60]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x54>)
 8003fc0:	5ccb      	ldrb	r3, [r1, r3]
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x54>)
 8003fd6:	5cd3      	ldrb	r3, [r2, r3]
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a07      	ldr	r2, [pc, #28]	; (8004000 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fe4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fe6:	4a07      	ldr	r2, [pc, #28]	; (8004004 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	08006e9c 	.word	0x08006e9c
 8004000:	24000004 	.word	0x24000004
 8004004:	24000000 	.word	0x24000000

08004008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800400c:	f7ff ffcc 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4904      	ldr	r1, [pc, #16]	; (8004030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	58024400 	.word	0x58024400
 8004030:	08006e9c 	.word	0x08006e9c

08004034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004038:	f7ff ffb6 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4904      	ldr	r1, [pc, #16]	; (800405c <HAL_RCC_GetPCLK2Freq+0x28>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	58024400 	.word	0x58024400
 800405c:	08006e9c 	.word	0x08006e9c

08004060 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004068:	2300      	movs	r3, #0
 800406a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800406c:	2300      	movs	r3, #0
 800406e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d03f      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004080:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004084:	d02a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004086:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800408a:	d824      	bhi.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800408c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004090:	d018      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004096:	d81e      	bhi.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800409c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040a0:	d007      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040a2:	e018      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a4:	4ba3      	ldr	r3, [pc, #652]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	4aa2      	ldr	r2, [pc, #648]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040b0:	e015      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2102      	movs	r1, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 f9d5 	bl	8005468 <RCCEx_PLL2_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040c2:	e00c      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3324      	adds	r3, #36	; 0x24
 80040c8:	2102      	movs	r1, #2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 fa7e 	bl	80055cc <RCCEx_PLL3_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040d4:	e003      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
      break;
 80040da:	e000      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040de:	7dfb      	ldrb	r3, [r7, #23]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040e4:	4b93      	ldr	r3, [pc, #588]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f0:	4990      	ldr	r1, [pc, #576]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	650b      	str	r3, [r1, #80]	; 0x50
 80040f6:	e001      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d03d      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	2b04      	cmp	r3, #4
 800410e:	d826      	bhi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800412d 	.word	0x0800412d
 800411c:	0800413b 	.word	0x0800413b
 8004120:	0800414d 	.word	0x0800414d
 8004124:	08004165 	.word	0x08004165
 8004128:	08004165 	.word	0x08004165
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800412c:	4b81      	ldr	r3, [pc, #516]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	4a80      	ldr	r2, [pc, #512]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004138:	e015      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3304      	adds	r3, #4
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f001 f991 	bl	8005468 <RCCEx_PLL2_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800414a:	e00c      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3324      	adds	r3, #36	; 0x24
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fa3a 	bl	80055cc <RCCEx_PLL3_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800415c:	e003      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	75fb      	strb	r3, [r7, #23]
      break;
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800416c:	4b71      	ldr	r3, [pc, #452]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800416e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004170:	f023 0207 	bic.w	r2, r3, #7
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	496e      	ldr	r1, [pc, #440]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	650b      	str	r3, [r1, #80]	; 0x50
 800417e:	e001      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418c:	2b00      	cmp	r3, #0
 800418e:	d042      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004198:	d02b      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800419a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419e:	d825      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80041a0:	2bc0      	cmp	r3, #192	; 0xc0
 80041a2:	d028      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041a4:	2bc0      	cmp	r3, #192	; 0xc0
 80041a6:	d821      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80041a8:	2b80      	cmp	r3, #128	; 0x80
 80041aa:	d016      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d81d      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d007      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80041b8:	e018      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ba:	4b5e      	ldr	r3, [pc, #376]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	4a5d      	ldr	r2, [pc, #372]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80041c6:	e017      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 f94a 	bl	8005468 <RCCEx_PLL2_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80041d8:	e00e      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3324      	adds	r3, #36	; 0x24
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 f9f3 	bl	80055cc <RCCEx_PLL3_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80041ea:	e005      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	75fb      	strb	r3, [r7, #23]
      break;
 80041f0:	e002      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80041f2:	bf00      	nop
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80041f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80041fe:	4b4d      	ldr	r3, [pc, #308]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	494a      	ldr	r1, [pc, #296]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800420c:	4313      	orrs	r3, r2
 800420e:	650b      	str	r3, [r1, #80]	; 0x50
 8004210:	e001      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004212:	7dfb      	ldrb	r3, [r7, #23]
 8004214:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	2b00      	cmp	r3, #0
 8004220:	d049      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800422c:	d030      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800422e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004232:	d82a      	bhi.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004234:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004238:	d02c      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800423a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800423e:	d824      	bhi.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004244:	d018      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424a:	d81e      	bhi.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004254:	d007      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004256:	e018      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004258:	4b36      	ldr	r3, [pc, #216]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4a35      	ldr	r2, [pc, #212]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800425e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004264:	e017      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3304      	adds	r3, #4
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f001 f8fb 	bl	8005468 <RCCEx_PLL2_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004276:	e00e      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3324      	adds	r3, #36	; 0x24
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f001 f9a4 	bl	80055cc <RCCEx_PLL3_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004288:	e005      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
      break;
 800428e:	e002      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042aa:	4922      	ldr	r1, [pc, #136]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	658b      	str	r3, [r1, #88]	; 0x58
 80042b0:	e001      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d04b      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042cc:	d030      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80042ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042d2:	d82a      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80042d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042d8:	d02e      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80042da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042de:	d824      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80042e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e4:	d018      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80042e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ea:	d81e      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80042f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042f4:	d007      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80042f6:	e018      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	4a0d      	ldr	r2, [pc, #52]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004302:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004304:	e019      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3304      	adds	r3, #4
 800430a:	2100      	movs	r1, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f001 f8ab 	bl	8005468 <RCCEx_PLL2_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004316:	e010      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f001 f954 	bl	80055cc <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004328:	e007      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
      break;
 800432e:	e004      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004330:	bf00      	nop
 8004332:	e002      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004334:	58024400 	.word	0x58024400
      break;
 8004338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004340:	4b99      	ldr	r3, [pc, #612]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800434e:	4996      	ldr	r1, [pc, #600]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004350:	4313      	orrs	r3, r2
 8004352:	658b      	str	r3, [r1, #88]	; 0x58
 8004354:	e001      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	7dfb      	ldrb	r3, [r7, #23]
 8004358:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d032      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436a:	2b30      	cmp	r3, #48	; 0x30
 800436c:	d01c      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800436e:	2b30      	cmp	r3, #48	; 0x30
 8004370:	d817      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004372:	2b20      	cmp	r3, #32
 8004374:	d00c      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004376:	2b20      	cmp	r3, #32
 8004378:	d813      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800437e:	2b10      	cmp	r3, #16
 8004380:	d10f      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004382:	4b89      	ldr	r3, [pc, #548]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	4a88      	ldr	r2, [pc, #544]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800438e:	e00e      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	2102      	movs	r1, #2
 8004396:	4618      	mov	r0, r3
 8004398:	f001 f866 	bl	8005468 <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80043a0:	e005      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	75fb      	strb	r3, [r7, #23]
      break;
 80043a6:	e002      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80043a8:	bf00      	nop
 80043aa:	e000      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80043ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043b4:	4b7c      	ldr	r3, [pc, #496]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80043b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c0:	4979      	ldr	r1, [pc, #484]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043c6:	e001      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d047      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e0:	d030      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80043e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e6:	d82a      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80043e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043ec:	d02c      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80043ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043f2:	d824      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80043f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f8:	d018      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fe:	d81e      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004408:	d007      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800440a:	e018      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800440c:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	4a65      	ldr	r2, [pc, #404]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004418:	e017      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f001 f821 	bl	8005468 <RCCEx_PLL2_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800442a:	e00e      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3324      	adds	r3, #36	; 0x24
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f001 f8ca 	bl	80055cc <RCCEx_PLL3_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800443c:	e005      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
      break;
 8004442:	e002      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004450:	4b55      	ldr	r3, [pc, #340]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004454:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445c:	4952      	ldr	r1, [pc, #328]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800445e:	4313      	orrs	r3, r2
 8004460:	650b      	str	r3, [r1, #80]	; 0x50
 8004462:	e001      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d049      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800447c:	d02e      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800447e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004482:	d828      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004484:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004488:	d02a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800448a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800448e:	d822      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004490:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004494:	d026      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004496:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800449a:	d81c      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800449c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a0:	d010      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80044a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a6:	d816      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01d      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d111      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2101      	movs	r1, #1
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 ffd5 	bl	8005468 <RCCEx_PLL2_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80044c2:	e012      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3324      	adds	r3, #36	; 0x24
 80044c8:	2101      	movs	r1, #1
 80044ca:	4618      	mov	r0, r3
 80044cc:	f001 f87e 	bl	80055cc <RCCEx_PLL3_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80044d4:	e009      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
      break;
 80044da:	e006      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80044dc:	bf00      	nop
 80044de:	e004      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80044e0:	bf00      	nop
 80044e2:	e002      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80044e4:	bf00      	nop
 80044e6:	e000      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80044e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80044f0:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fc:	492a      	ldr	r1, [pc, #168]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	650b      	str	r3, [r1, #80]	; 0x50
 8004502:	e001      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d04d      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800451a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800451e:	d02e      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004524:	d828      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d02a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d822      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004532:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004536:	d026      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004538:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800453c:	d81c      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800453e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004542:	d010      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004548:	d816      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01d      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800454e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004552:	d111      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f000 ff84 	bl	8005468 <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004564:	e012      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3324      	adds	r3, #36	; 0x24
 800456a:	2101      	movs	r1, #1
 800456c:	4618      	mov	r0, r3
 800456e:	f001 f82d 	bl	80055cc <RCCEx_PLL3_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004576:	e009      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	75fb      	strb	r3, [r7, #23]
      break;
 800457c:	e006      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800457e:	bf00      	nop
 8004580:	e004      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800458a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10c      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045a0:	4901      	ldr	r1, [pc, #4]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	658b      	str	r3, [r1, #88]	; 0x58
 80045a6:	e003      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80045a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d02f      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c4:	d00e      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80045c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ca:	d814      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d015      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80045d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045d4:	d10f      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d6:	4baf      	ldr	r3, [pc, #700]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	4aae      	ldr	r2, [pc, #696]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045e2:	e00c      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	2101      	movs	r1, #1
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 ff3c 	bl	8005468 <RCCEx_PLL2_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045f4:	e003      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
      break;
 80045fa:	e000      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80045fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004604:	4ba3      	ldr	r3, [pc, #652]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004610:	49a0      	ldr	r1, [pc, #640]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004612:	4313      	orrs	r3, r2
 8004614:	650b      	str	r3, [r1, #80]	; 0x50
 8004616:	e001      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d032      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	2b03      	cmp	r3, #3
 800462e:	d81b      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004630:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800466f 	.word	0x0800466f
 800463c:	08004649 	.word	0x08004649
 8004640:	08004657 	.word	0x08004657
 8004644:	0800466f 	.word	0x0800466f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004648:	4b92      	ldr	r3, [pc, #584]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	4a91      	ldr	r2, [pc, #580]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800464e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004654:	e00c      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 ff03 	bl	8005468 <RCCEx_PLL2_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004666:	e003      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	75fb      	strb	r3, [r7, #23]
      break;
 800466c:	e000      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800466e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004670:	7dfb      	ldrb	r3, [r7, #23]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004676:	4b87      	ldr	r3, [pc, #540]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467a:	f023 0203 	bic.w	r2, r3, #3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	4984      	ldr	r1, [pc, #528]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004684:	4313      	orrs	r3, r2
 8004686:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004688:	e001      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468a:	7dfb      	ldrb	r3, [r7, #23]
 800468c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8086 	beq.w	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469c:	4b7e      	ldr	r3, [pc, #504]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a7d      	ldr	r2, [pc, #500]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80046a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046a8:	f7fc feae 	bl	8001408 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046ae:	e009      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b0:	f7fc feaa 	bl	8001408 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d902      	bls.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	75fb      	strb	r3, [r7, #23]
        break;
 80046c2:	e005      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c4:	4b74      	ldr	r3, [pc, #464]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ef      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d166      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046d6:	4b6f      	ldr	r3, [pc, #444]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046e0:	4053      	eors	r3, r2
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d013      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ea:	4b6a      	ldr	r3, [pc, #424]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046f4:	4b67      	ldr	r3, [pc, #412]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a66      	ldr	r2, [pc, #408]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004700:	4b64      	ldr	r3, [pc, #400]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a63      	ldr	r2, [pc, #396]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800470c:	4a61      	ldr	r2, [pc, #388]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471c:	d115      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471e:	f7fc fe73 	bl	8001408 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004724:	e00b      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fc fe6f 	bl	8001408 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f241 3288 	movw	r2, #5000	; 0x1388
 8004734:	4293      	cmp	r3, r2
 8004736:	d902      	bls.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	75fb      	strb	r3, [r7, #23]
            break;
 800473c:	e005      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800473e:	4b55      	ldr	r3, [pc, #340]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ed      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d126      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800475e:	d10d      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004760:	4b4c      	ldr	r3, [pc, #304]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800476e:	0919      	lsrs	r1, r3, #4
 8004770:	4b4a      	ldr	r3, [pc, #296]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004772:	400b      	ands	r3, r1
 8004774:	4947      	ldr	r1, [pc, #284]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004776:	4313      	orrs	r3, r2
 8004778:	610b      	str	r3, [r1, #16]
 800477a:	e005      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800477c:	4b45      	ldr	r3, [pc, #276]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	4a44      	ldr	r2, [pc, #272]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004782:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004786:	6113      	str	r3, [r2, #16]
 8004788:	4b42      	ldr	r3, [pc, #264]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800478a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004796:	493f      	ldr	r1, [pc, #252]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004798:	4313      	orrs	r3, r2
 800479a:	670b      	str	r3, [r1, #112]	; 0x70
 800479c:	e004      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	75bb      	strb	r3, [r7, #22]
 80047a2:	e001      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8085 	beq.w	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ba:	2b28      	cmp	r3, #40	; 0x28
 80047bc:	d866      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80047be:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	080048a1 	.word	0x080048a1
 80047c8:	0800488d 	.word	0x0800488d
 80047cc:	0800488d 	.word	0x0800488d
 80047d0:	0800488d 	.word	0x0800488d
 80047d4:	0800488d 	.word	0x0800488d
 80047d8:	0800488d 	.word	0x0800488d
 80047dc:	0800488d 	.word	0x0800488d
 80047e0:	0800488d 	.word	0x0800488d
 80047e4:	08004869 	.word	0x08004869
 80047e8:	0800488d 	.word	0x0800488d
 80047ec:	0800488d 	.word	0x0800488d
 80047f0:	0800488d 	.word	0x0800488d
 80047f4:	0800488d 	.word	0x0800488d
 80047f8:	0800488d 	.word	0x0800488d
 80047fc:	0800488d 	.word	0x0800488d
 8004800:	0800488d 	.word	0x0800488d
 8004804:	0800487b 	.word	0x0800487b
 8004808:	0800488d 	.word	0x0800488d
 800480c:	0800488d 	.word	0x0800488d
 8004810:	0800488d 	.word	0x0800488d
 8004814:	0800488d 	.word	0x0800488d
 8004818:	0800488d 	.word	0x0800488d
 800481c:	0800488d 	.word	0x0800488d
 8004820:	0800488d 	.word	0x0800488d
 8004824:	080048a1 	.word	0x080048a1
 8004828:	0800488d 	.word	0x0800488d
 800482c:	0800488d 	.word	0x0800488d
 8004830:	0800488d 	.word	0x0800488d
 8004834:	0800488d 	.word	0x0800488d
 8004838:	0800488d 	.word	0x0800488d
 800483c:	0800488d 	.word	0x0800488d
 8004840:	0800488d 	.word	0x0800488d
 8004844:	080048a1 	.word	0x080048a1
 8004848:	0800488d 	.word	0x0800488d
 800484c:	0800488d 	.word	0x0800488d
 8004850:	0800488d 	.word	0x0800488d
 8004854:	0800488d 	.word	0x0800488d
 8004858:	0800488d 	.word	0x0800488d
 800485c:	0800488d 	.word	0x0800488d
 8004860:	0800488d 	.word	0x0800488d
 8004864:	080048a1 	.word	0x080048a1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	2101      	movs	r1, #1
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fdfa 	bl	8005468 <RCCEx_PLL2_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004878:	e013      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3324      	adds	r3, #36	; 0x24
 800487e:	2101      	movs	r1, #1
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fea3 	bl	80055cc <RCCEx_PLL3_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800488a:	e00a      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
      break;
 8004890:	e007      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004892:	bf00      	nop
 8004894:	58024400 	.word	0x58024400
 8004898:	58024800 	.word	0x58024800
 800489c:	00ffffcf 	.word	0x00ffffcf
      break;
 80048a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048a8:	4b96      	ldr	r3, [pc, #600]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b4:	4993      	ldr	r1, [pc, #588]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	654b      	str	r3, [r1, #84]	; 0x54
 80048ba:	e001      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d038      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d0:	2b05      	cmp	r3, #5
 80048d2:	d821      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	0800491f 	.word	0x0800491f
 80048e0:	080048f5 	.word	0x080048f5
 80048e4:	08004907 	.word	0x08004907
 80048e8:	0800491f 	.word	0x0800491f
 80048ec:	0800491f 	.word	0x0800491f
 80048f0:	0800491f 	.word	0x0800491f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	2101      	movs	r1, #1
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fdb4 	bl	8005468 <RCCEx_PLL2_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004904:	e00c      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3324      	adds	r3, #36	; 0x24
 800490a:	2101      	movs	r1, #1
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fe5d 	bl	80055cc <RCCEx_PLL3_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004916:	e003      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	75fb      	strb	r3, [r7, #23]
      break;
 800491c:	e000      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800491e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004926:	4b77      	ldr	r3, [pc, #476]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	f023 0207 	bic.w	r2, r3, #7
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004932:	4974      	ldr	r1, [pc, #464]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004934:	4313      	orrs	r3, r2
 8004936:	654b      	str	r3, [r1, #84]	; 0x54
 8004938:	e001      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493a:	7dfb      	ldrb	r3, [r7, #23]
 800493c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d03a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	2b05      	cmp	r3, #5
 8004952:	d821      	bhi.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	0800499f 	.word	0x0800499f
 8004960:	08004975 	.word	0x08004975
 8004964:	08004987 	.word	0x08004987
 8004968:	0800499f 	.word	0x0800499f
 800496c:	0800499f 	.word	0x0800499f
 8004970:	0800499f 	.word	0x0800499f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fd74 	bl	8005468 <RCCEx_PLL2_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004984:	e00c      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3324      	adds	r3, #36	; 0x24
 800498a:	2101      	movs	r1, #1
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fe1d 	bl	80055cc <RCCEx_PLL3_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004996:	e003      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
      break;
 800499c:	e000      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800499e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049a6:	4b57      	ldr	r3, [pc, #348]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049aa:	f023 0207 	bic.w	r2, r3, #7
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	4953      	ldr	r1, [pc, #332]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	658b      	str	r3, [r1, #88]	; 0x58
 80049ba:	e001      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d04b      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049d6:	d02e      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80049d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049dc:	d828      	bhi.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d02a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d822      	bhi.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80049ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049ee:	d026      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80049f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049f4:	d81c      	bhi.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80049f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fa:	d010      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80049fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a00:	d816      	bhi.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01d      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a0a:	d111      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fd28 	bl	8005468 <RCCEx_PLL2_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a1c:	e012      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3324      	adds	r3, #36	; 0x24
 8004a22:	2102      	movs	r1, #2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fdd1 	bl	80055cc <RCCEx_PLL3_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a2e:	e009      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	75fb      	strb	r3, [r7, #23]
      break;
 8004a34:	e006      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004a36:	bf00      	nop
 8004a38:	e004      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e002      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e000      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004a42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a4a:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a58:	492a      	ldr	r1, [pc, #168]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	654b      	str	r3, [r1, #84]	; 0x54
 8004a5e:	e001      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
 8004a62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d04d      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a7a:	d02e      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004a7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a80:	d828      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a86:	d02a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8c:	d822      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004a8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a92:	d026      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a98:	d81c      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9e:	d010      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa4:	d816      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01d      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aae:	d111      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fcd6 	bl	8005468 <RCCEx_PLL2_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ac0:	e012      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3324      	adds	r3, #36	; 0x24
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fd7f 	bl	80055cc <RCCEx_PLL3_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ad2:	e009      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ada:	bf00      	nop
 8004adc:	e004      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e002      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ae8:	7dfb      	ldrb	r3, [r7, #23]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10c      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004afc:	4901      	ldr	r1, [pc, #4]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	658b      	str	r3, [r1, #88]	; 0x58
 8004b02:	e003      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004b04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d04b      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b22:	d02e      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004b24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b28:	d828      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2e:	d02a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b34:	d822      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004b36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b3a:	d026      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004b3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b40:	d81c      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b46:	d010      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b4c:	d816      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01d      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b56:	d111      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fc82 	bl	8005468 <RCCEx_PLL2_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b68:	e012      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3324      	adds	r3, #36	; 0x24
 8004b6e:	2102      	movs	r1, #2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fd2b 	bl	80055cc <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b7a:	e009      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b80:	e006      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004b82:	bf00      	nop
 8004b84:	e004      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004b86:	bf00      	nop
 8004b88:	e002      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e000      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b96:	4b9d      	ldr	r3, [pc, #628]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ba4:	4999      	ldr	r1, [pc, #612]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	658b      	str	r3, [r1, #88]	; 0x58
 8004baa:	e001      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc6:	d10a      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3324      	adds	r3, #36	; 0x24
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fcfc 	bl	80055cc <RCCEx_PLL3_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004bde:	4b8b      	ldr	r3, [pc, #556]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bec:	4987      	ldr	r1, [pc, #540]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c08:	d10a      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3324      	adds	r3, #36	; 0x24
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fcdb 	bl	80055cc <RCCEx_PLL3_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c20:	4b7a      	ldr	r3, [pc, #488]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2e:	4977      	ldr	r1, [pc, #476]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d034      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c4a:	d01d      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c50:	d817      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5a:	d009      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004c5c:	e011      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3304      	adds	r3, #4
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fbff 	bl	8005468 <RCCEx_PLL2_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c6e:	e00c      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3324      	adds	r3, #36	; 0x24
 8004c74:	2102      	movs	r1, #2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fca8 	bl	80055cc <RCCEx_PLL3_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c80:	e003      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]
      break;
 8004c86:	e000      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c90:	4b5e      	ldr	r3, [pc, #376]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c9e:	495b      	ldr	r1, [pc, #364]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	658b      	str	r3, [r1, #88]	; 0x58
 8004ca4:	e001      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d033      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cc0:	d01c      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004cc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cc6:	d816      	bhi.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cd2:	d007      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004cd4:	e00f      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd6:	4b4d      	ldr	r3, [pc, #308]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	4a4c      	ldr	r2, [pc, #304]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ce2:	e00c      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3324      	adds	r3, #36	; 0x24
 8004ce8:	2101      	movs	r1, #1
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fc6e 	bl	80055cc <RCCEx_PLL3_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004cf4:	e003      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfa:	e000      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d04:	4b41      	ldr	r3, [pc, #260]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d12:	493e      	ldr	r1, [pc, #248]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	654b      	str	r3, [r1, #84]	; 0x54
 8004d18:	e001      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
 8004d1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d029      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d36:	d007      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004d38:	e00f      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d3a:	4b34      	ldr	r3, [pc, #208]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	4a33      	ldr	r2, [pc, #204]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d46:	e00b      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fb8a 	bl	8005468 <RCCEx_PLL2_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d58:	e002      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d66:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	4926      	ldr	r1, [pc, #152]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d78:	e001      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3324      	adds	r3, #36	; 0x24
 8004d8e:	2102      	movs	r1, #2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fc1b 	bl	80055cc <RCCEx_PLL3_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d033      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004db4:	d017      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dba:	d811      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc0:	d013      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc6:	d80b      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d010      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd0:	d106      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd2:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	4a0d      	ldr	r2, [pc, #52]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004dde:	e007      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	75fb      	strb	r3, [r7, #23]
      break;
 8004de4:	e004      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004de6:	bf00      	nop
 8004de8:	e002      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004dea:	bf00      	nop
 8004dec:	e000      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e02:	4902      	ldr	r1, [pc, #8]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	654b      	str	r3, [r1, #84]	; 0x54
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e20:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	492e      	ldr	r1, [pc, #184]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d009      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e3e:	4b2a      	ldr	r3, [pc, #168]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e4c:	4926      	ldr	r1, [pc, #152]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e5e:	4b22      	ldr	r3, [pc, #136]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e6a:	491f      	ldr	r1, [pc, #124]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	4a19      	ldr	r2, [pc, #100]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e86:	6113      	str	r3, [r2, #16]
 8004e88:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e92:	4915      	ldr	r1, [pc, #84]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	da08      	bge.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eac:	490e      	ldr	r1, [pc, #56]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	4906      	ldr	r1, [pc, #24]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004ed2:	7dbb      	ldrb	r3, [r7, #22]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e000      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	58024400 	.word	0x58024400

08004eec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ef0:	f7ff f85a 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4904      	ldr	r1, [pc, #16]	; (8004f14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	58024400 	.word	0x58024400
 8004f14:	08006e9c 	.word	0x08006e9c

08004f18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	; 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f20:	4ba1      	ldr	r3, [pc, #644]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004f2a:	4b9f      	ldr	r3, [pc, #636]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	0b1b      	lsrs	r3, r3, #12
 8004f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f36:	4b9c      	ldr	r3, [pc, #624]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	091b      	lsrs	r3, r3, #4
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004f42:	4b99      	ldr	r3, [pc, #612]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	08db      	lsrs	r3, r3, #3
 8004f48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8111 	beq.w	8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	f000 8083 	beq.w	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	f200 80a1 	bhi.w	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d056      	beq.n	8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f82:	e099      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f84:	4b88      	ldr	r3, [pc, #544]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d02d      	beq.n	8004fec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f90:	4b85      	ldr	r3, [pc, #532]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	08db      	lsrs	r3, r3, #3
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	4a84      	ldr	r2, [pc, #528]	; (80051ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	ee07 3a90 	vmov	s15, r3
 8004fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fba:	4b7b      	ldr	r3, [pc, #492]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004fea:	e087      	b.n	80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80051b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffe:	4b6a      	ldr	r3, [pc, #424]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005012:	eddf 5a67 	vldr	s11, [pc, #412]	; 80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800502e:	e065      	b.n	80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800503e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005042:	4b59      	ldr	r3, [pc, #356]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005052:	ed97 6a03 	vldr	s12, [r7, #12]
 8005056:	eddf 5a56 	vldr	s11, [pc, #344]	; 80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800505a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005072:	e043      	b.n	80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80051bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005086:	4b48      	ldr	r3, [pc, #288]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005096:	ed97 6a03 	vldr	s12, [r7, #12]
 800509a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800509e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050b6:	e021      	b.n	80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ca:	4b37      	ldr	r3, [pc, #220]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050da:	ed97 6a03 	vldr	s12, [r7, #12]
 80050de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80050fc:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	0a5b      	lsrs	r3, r3, #9
 8005102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005112:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005116:	edd7 6a07 	vldr	s13, [r7, #28]
 800511a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800511e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005122:	ee17 2a90 	vmov	r2, s15
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800512a:	4b1f      	ldr	r3, [pc, #124]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	0c1b      	lsrs	r3, r3, #16
 8005130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005134:	ee07 3a90 	vmov	s15, r3
 8005138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005140:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005144:	edd7 6a07 	vldr	s13, [r7, #28]
 8005148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800514c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005150:	ee17 2a90 	vmov	r2, s15
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005158:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	0e1b      	lsrs	r3, r3, #24
 800515e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800516e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005172:	edd7 6a07 	vldr	s13, [r7, #28]
 8005176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800517a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800517e:	ee17 2a90 	vmov	r2, s15
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005186:	e008      	b.n	800519a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	609a      	str	r2, [r3, #8]
}
 800519a:	bf00      	nop
 800519c:	3724      	adds	r7, #36	; 0x24
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	58024400 	.word	0x58024400
 80051ac:	03d09000 	.word	0x03d09000
 80051b0:	46000000 	.word	0x46000000
 80051b4:	4c742400 	.word	0x4c742400
 80051b8:	4a742400 	.word	0x4a742400
 80051bc:	4af42400 	.word	0x4af42400

080051c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	; 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051c8:	4ba1      	ldr	r3, [pc, #644]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80051d2:	4b9f      	ldr	r3, [pc, #636]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	0d1b      	lsrs	r3, r3, #20
 80051d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80051de:	4b9c      	ldr	r3, [pc, #624]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80051ea:	4b99      	ldr	r3, [pc, #612]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	08db      	lsrs	r3, r3, #3
 80051f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8111 	beq.w	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b02      	cmp	r3, #2
 8005212:	f000 8083 	beq.w	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b02      	cmp	r3, #2
 800521a:	f200 80a1 	bhi.w	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d056      	beq.n	80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800522a:	e099      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800522c:	4b88      	ldr	r3, [pc, #544]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d02d      	beq.n	8005294 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005238:	4b85      	ldr	r3, [pc, #532]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	08db      	lsrs	r3, r3, #3
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	4a84      	ldr	r2, [pc, #528]	; (8005454 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
 8005248:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	ee07 3a90 	vmov	s15, r3
 8005250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b7b      	ldr	r3, [pc, #492]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005272:	ed97 6a03 	vldr	s12, [r7, #12]
 8005276:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005292:	e087      	b.n	80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800545c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80052a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a6:	4b6a      	ldr	r3, [pc, #424]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052d6:	e065      	b.n	80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005460 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ea:	4b59      	ldr	r3, [pc, #356]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80052fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800530e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800531a:	e043      	b.n	80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005464 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800532a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532e:	4b48      	ldr	r3, [pc, #288]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005342:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800535e:	e021      	b.n	80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005460 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800536e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005372:	4b37      	ldr	r3, [pc, #220]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005382:	ed97 6a03 	vldr	s12, [r7, #12]
 8005386:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800538a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80053a4:	4b2a      	ldr	r3, [pc, #168]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	0a5b      	lsrs	r3, r3, #9
 80053aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053be:	edd7 6a07 	vldr	s13, [r7, #28]
 80053c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ca:	ee17 2a90 	vmov	r2, s15
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80053d2:	4b1f      	ldr	r3, [pc, #124]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80053f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f8:	ee17 2a90 	vmov	r2, s15
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005400:	4b13      	ldr	r3, [pc, #76]	; (8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	0e1b      	lsrs	r3, r3, #24
 8005406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800541a:	edd7 6a07 	vldr	s13, [r7, #28]
 800541e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005426:	ee17 2a90 	vmov	r2, s15
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800542e:	e008      	b.n	8005442 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	609a      	str	r2, [r3, #8]
}
 8005442:	bf00      	nop
 8005444:	3724      	adds	r7, #36	; 0x24
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	58024400 	.word	0x58024400
 8005454:	03d09000 	.word	0x03d09000
 8005458:	46000000 	.word	0x46000000
 800545c:	4c742400 	.word	0x4c742400
 8005460:	4a742400 	.word	0x4a742400
 8005464:	4af42400 	.word	0x4af42400

08005468 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005476:	4b53      	ldr	r3, [pc, #332]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b03      	cmp	r3, #3
 8005480:	d101      	bne.n	8005486 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e099      	b.n	80055ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005486:	4b4f      	ldr	r3, [pc, #316]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a4e      	ldr	r2, [pc, #312]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 800548c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005492:	f7fb ffb9 	bl	8001408 <HAL_GetTick>
 8005496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005498:	e008      	b.n	80054ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800549a:	f7fb ffb5 	bl	8001408 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e086      	b.n	80055ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054ac:	4b45      	ldr	r3, [pc, #276]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f0      	bne.n	800549a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80054b8:	4b42      	ldr	r3, [pc, #264]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	031b      	lsls	r3, r3, #12
 80054c6:	493f      	ldr	r1, [pc, #252]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	628b      	str	r3, [r1, #40]	; 0x28
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	3b01      	subs	r3, #1
 80054dc:	025b      	lsls	r3, r3, #9
 80054de:	b29b      	uxth	r3, r3
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	061b      	lsls	r3, r3, #24
 80054f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054fc:	4931      	ldr	r1, [pc, #196]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005502:	4b30      	ldr	r3, [pc, #192]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	492d      	ldr	r1, [pc, #180]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005510:	4313      	orrs	r3, r2
 8005512:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005514:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	f023 0220 	bic.w	r2, r3, #32
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	4928      	ldr	r1, [pc, #160]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005522:	4313      	orrs	r3, r2
 8005524:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005526:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	4a26      	ldr	r2, [pc, #152]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 800552c:	f023 0310 	bic.w	r3, r3, #16
 8005530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005532:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005536:	4b24      	ldr	r3, [pc, #144]	; (80055c8 <RCCEx_PLL2_Config+0x160>)
 8005538:	4013      	ands	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	69d2      	ldr	r2, [r2, #28]
 800553e:	00d2      	lsls	r2, r2, #3
 8005540:	4920      	ldr	r1, [pc, #128]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005546:	4b1f      	ldr	r3, [pc, #124]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 800554c:	f043 0310 	orr.w	r3, r3, #16
 8005550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005558:	4b1a      	ldr	r3, [pc, #104]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 800555e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005562:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005564:	e00f      	b.n	8005586 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d106      	bne.n	800557a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800556c:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005576:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005578:	e005      	b.n	8005586 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800557a:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	4a11      	ldr	r2, [pc, #68]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005584:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a0e      	ldr	r2, [pc, #56]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 800558c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005592:	f7fb ff39 	bl	8001408 <HAL_GetTick>
 8005596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005598:	e008      	b.n	80055ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800559a:	f7fb ff35 	bl	8001408 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e006      	b.n	80055ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <RCCEx_PLL2_Config+0x15c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0f0      	beq.n	800559a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	58024400 	.word	0x58024400
 80055c8:	ffff0007 	.word	0xffff0007

080055cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055da:	4b53      	ldr	r3, [pc, #332]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d101      	bne.n	80055ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e099      	b.n	800571e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80055ea:	4b4f      	ldr	r3, [pc, #316]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a4e      	ldr	r2, [pc, #312]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80055f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f6:	f7fb ff07 	bl	8001408 <HAL_GetTick>
 80055fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055fc:	e008      	b.n	8005610 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80055fe:	f7fb ff03 	bl	8001408 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e086      	b.n	800571e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005610:	4b45      	ldr	r3, [pc, #276]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1f0      	bne.n	80055fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800561c:	4b42      	ldr	r3, [pc, #264]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	051b      	lsls	r3, r3, #20
 800562a:	493f      	ldr	r1, [pc, #252]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 800562c:	4313      	orrs	r3, r2
 800562e:	628b      	str	r3, [r1, #40]	; 0x28
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	3b01      	subs	r3, #1
 8005636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	3b01      	subs	r3, #1
 8005640:	025b      	lsls	r3, r3, #9
 8005642:	b29b      	uxth	r3, r3
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	3b01      	subs	r3, #1
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	3b01      	subs	r3, #1
 800565a:	061b      	lsls	r3, r3, #24
 800565c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005660:	4931      	ldr	r1, [pc, #196]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 8005662:	4313      	orrs	r3, r2
 8005664:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005666:	4b30      	ldr	r3, [pc, #192]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	492d      	ldr	r1, [pc, #180]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 8005674:	4313      	orrs	r3, r2
 8005676:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005678:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	4928      	ldr	r1, [pc, #160]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 8005686:	4313      	orrs	r3, r2
 8005688:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800568a:	4b27      	ldr	r3, [pc, #156]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	4a26      	ldr	r2, [pc, #152]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 8005690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005696:	4b24      	ldr	r3, [pc, #144]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 8005698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800569a:	4b24      	ldr	r3, [pc, #144]	; (800572c <RCCEx_PLL3_Config+0x160>)
 800569c:	4013      	ands	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	69d2      	ldr	r2, [r2, #28]
 80056a2:	00d2      	lsls	r2, r2, #3
 80056a4:	4920      	ldr	r1, [pc, #128]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80056aa:	4b1f      	ldr	r3, [pc, #124]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056bc:	4b1a      	ldr	r3, [pc, #104]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	4a19      	ldr	r2, [pc, #100]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056c8:	e00f      	b.n	80056ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d106      	bne.n	80056de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80056d0:	4b15      	ldr	r3, [pc, #84]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4a14      	ldr	r2, [pc, #80]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056dc:	e005      	b.n	80056ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80056de:	4b12      	ldr	r3, [pc, #72]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	4a11      	ldr	r2, [pc, #68]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80056ea:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a0e      	ldr	r2, [pc, #56]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 80056f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f6:	f7fb fe87 	bl	8001408 <HAL_GetTick>
 80056fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056fc:	e008      	b.n	8005710 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056fe:	f7fb fe83 	bl	8001408 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e006      	b.n	800571e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <RCCEx_PLL3_Config+0x15c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800571c:	7bfb      	ldrb	r3, [r7, #15]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	58024400 	.word	0x58024400
 800572c:	ffff0007 	.word	0xffff0007

08005730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e042      	b.n	80057c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7fb fc9d 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2224      	movs	r2, #36	; 0x24
 800575e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f82c 	bl	80057d0 <UART_SetConfig>
 8005778:	4603      	mov	r3, r0
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e022      	b.n	80057c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fd88 	bl	80062a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800579e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fe0f 	bl	80063e4 <UART_CheckIdleState>
 80057c6:	4603      	mov	r3, r0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d4:	b092      	sub	sp, #72	; 0x48
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4bbe      	ldr	r3, [pc, #760]	; (8005af8 <UART_SetConfig+0x328>)
 8005800:	4013      	ands	r3, r2
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005808:	430b      	orrs	r3, r1
 800580a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4ab3      	ldr	r2, [pc, #716]	; (8005afc <UART_SetConfig+0x32c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005838:	4313      	orrs	r3, r2
 800583a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	4baf      	ldr	r3, [pc, #700]	; (8005b00 <UART_SetConfig+0x330>)
 8005844:	4013      	ands	r3, r2
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800584c:	430b      	orrs	r3, r1
 800584e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	f023 010f 	bic.w	r1, r3, #15
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4aa6      	ldr	r2, [pc, #664]	; (8005b04 <UART_SetConfig+0x334>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d177      	bne.n	8005960 <UART_SetConfig+0x190>
 8005870:	4ba5      	ldr	r3, [pc, #660]	; (8005b08 <UART_SetConfig+0x338>)
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005878:	2b28      	cmp	r3, #40	; 0x28
 800587a:	d86d      	bhi.n	8005958 <UART_SetConfig+0x188>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0xb4>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	08005929 	.word	0x08005929
 8005888:	08005959 	.word	0x08005959
 800588c:	08005959 	.word	0x08005959
 8005890:	08005959 	.word	0x08005959
 8005894:	08005959 	.word	0x08005959
 8005898:	08005959 	.word	0x08005959
 800589c:	08005959 	.word	0x08005959
 80058a0:	08005959 	.word	0x08005959
 80058a4:	08005931 	.word	0x08005931
 80058a8:	08005959 	.word	0x08005959
 80058ac:	08005959 	.word	0x08005959
 80058b0:	08005959 	.word	0x08005959
 80058b4:	08005959 	.word	0x08005959
 80058b8:	08005959 	.word	0x08005959
 80058bc:	08005959 	.word	0x08005959
 80058c0:	08005959 	.word	0x08005959
 80058c4:	08005939 	.word	0x08005939
 80058c8:	08005959 	.word	0x08005959
 80058cc:	08005959 	.word	0x08005959
 80058d0:	08005959 	.word	0x08005959
 80058d4:	08005959 	.word	0x08005959
 80058d8:	08005959 	.word	0x08005959
 80058dc:	08005959 	.word	0x08005959
 80058e0:	08005959 	.word	0x08005959
 80058e4:	08005941 	.word	0x08005941
 80058e8:	08005959 	.word	0x08005959
 80058ec:	08005959 	.word	0x08005959
 80058f0:	08005959 	.word	0x08005959
 80058f4:	08005959 	.word	0x08005959
 80058f8:	08005959 	.word	0x08005959
 80058fc:	08005959 	.word	0x08005959
 8005900:	08005959 	.word	0x08005959
 8005904:	08005949 	.word	0x08005949
 8005908:	08005959 	.word	0x08005959
 800590c:	08005959 	.word	0x08005959
 8005910:	08005959 	.word	0x08005959
 8005914:	08005959 	.word	0x08005959
 8005918:	08005959 	.word	0x08005959
 800591c:	08005959 	.word	0x08005959
 8005920:	08005959 	.word	0x08005959
 8005924:	08005951 	.word	0x08005951
 8005928:	2301      	movs	r3, #1
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592e:	e222      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005930:	2304      	movs	r3, #4
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e21e      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005938:	2308      	movs	r3, #8
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593e:	e21a      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005940:	2310      	movs	r3, #16
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005946:	e216      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005948:	2320      	movs	r3, #32
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594e:	e212      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005950:	2340      	movs	r3, #64	; 0x40
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005956:	e20e      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005958:	2380      	movs	r3, #128	; 0x80
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595e:	e20a      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a69      	ldr	r2, [pc, #420]	; (8005b0c <UART_SetConfig+0x33c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d130      	bne.n	80059cc <UART_SetConfig+0x1fc>
 800596a:	4b67      	ldr	r3, [pc, #412]	; (8005b08 <UART_SetConfig+0x338>)
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	2b05      	cmp	r3, #5
 8005974:	d826      	bhi.n	80059c4 <UART_SetConfig+0x1f4>
 8005976:	a201      	add	r2, pc, #4	; (adr r2, 800597c <UART_SetConfig+0x1ac>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	08005995 	.word	0x08005995
 8005980:	0800599d 	.word	0x0800599d
 8005984:	080059a5 	.word	0x080059a5
 8005988:	080059ad 	.word	0x080059ad
 800598c:	080059b5 	.word	0x080059b5
 8005990:	080059bd 	.word	0x080059bd
 8005994:	2300      	movs	r3, #0
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599a:	e1ec      	b.n	8005d76 <UART_SetConfig+0x5a6>
 800599c:	2304      	movs	r3, #4
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a2:	e1e8      	b.n	8005d76 <UART_SetConfig+0x5a6>
 80059a4:	2308      	movs	r3, #8
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059aa:	e1e4      	b.n	8005d76 <UART_SetConfig+0x5a6>
 80059ac:	2310      	movs	r3, #16
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b2:	e1e0      	b.n	8005d76 <UART_SetConfig+0x5a6>
 80059b4:	2320      	movs	r3, #32
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ba:	e1dc      	b.n	8005d76 <UART_SetConfig+0x5a6>
 80059bc:	2340      	movs	r3, #64	; 0x40
 80059be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c2:	e1d8      	b.n	8005d76 <UART_SetConfig+0x5a6>
 80059c4:	2380      	movs	r3, #128	; 0x80
 80059c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ca:	e1d4      	b.n	8005d76 <UART_SetConfig+0x5a6>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a4f      	ldr	r2, [pc, #316]	; (8005b10 <UART_SetConfig+0x340>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d130      	bne.n	8005a38 <UART_SetConfig+0x268>
 80059d6:	4b4c      	ldr	r3, [pc, #304]	; (8005b08 <UART_SetConfig+0x338>)
 80059d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	2b05      	cmp	r3, #5
 80059e0:	d826      	bhi.n	8005a30 <UART_SetConfig+0x260>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0x218>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a01 	.word	0x08005a01
 80059ec:	08005a09 	.word	0x08005a09
 80059f0:	08005a11 	.word	0x08005a11
 80059f4:	08005a19 	.word	0x08005a19
 80059f8:	08005a21 	.word	0x08005a21
 80059fc:	08005a29 	.word	0x08005a29
 8005a00:	2300      	movs	r3, #0
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a06:	e1b6      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0e:	e1b2      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a10:	2308      	movs	r3, #8
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a16:	e1ae      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1e:	e1aa      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a20:	2320      	movs	r3, #32
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a26:	e1a6      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a28:	2340      	movs	r3, #64	; 0x40
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2e:	e1a2      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a36:	e19e      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a35      	ldr	r2, [pc, #212]	; (8005b14 <UART_SetConfig+0x344>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d130      	bne.n	8005aa4 <UART_SetConfig+0x2d4>
 8005a42:	4b31      	ldr	r3, [pc, #196]	; (8005b08 <UART_SetConfig+0x338>)
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	2b05      	cmp	r3, #5
 8005a4c:	d826      	bhi.n	8005a9c <UART_SetConfig+0x2cc>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x284>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a6d 	.word	0x08005a6d
 8005a58:	08005a75 	.word	0x08005a75
 8005a5c:	08005a7d 	.word	0x08005a7d
 8005a60:	08005a85 	.word	0x08005a85
 8005a64:	08005a8d 	.word	0x08005a8d
 8005a68:	08005a95 	.word	0x08005a95
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a72:	e180      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a74:	2304      	movs	r3, #4
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7a:	e17c      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a82:	e178      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a84:	2310      	movs	r3, #16
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8a:	e174      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a92:	e170      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a94:	2340      	movs	r3, #64	; 0x40
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9a:	e16c      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005a9c:	2380      	movs	r3, #128	; 0x80
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aa2:	e168      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <UART_SetConfig+0x348>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d142      	bne.n	8005b34 <UART_SetConfig+0x364>
 8005aae:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <UART_SetConfig+0x338>)
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d838      	bhi.n	8005b2c <UART_SetConfig+0x35c>
 8005aba:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <UART_SetConfig+0x2f0>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005ad9 	.word	0x08005ad9
 8005ac4:	08005ae1 	.word	0x08005ae1
 8005ac8:	08005ae9 	.word	0x08005ae9
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005b1d 	.word	0x08005b1d
 8005ad4:	08005b25 	.word	0x08005b25
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ade:	e14a      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae6:	e146      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005ae8:	2308      	movs	r3, #8
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aee:	e142      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005af0:	2310      	movs	r3, #16
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af6:	e13e      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005af8:	cfff69f3 	.word	0xcfff69f3
 8005afc:	58000c00 	.word	0x58000c00
 8005b00:	11fff4ff 	.word	0x11fff4ff
 8005b04:	40011000 	.word	0x40011000
 8005b08:	58024400 	.word	0x58024400
 8005b0c:	40004400 	.word	0x40004400
 8005b10:	40004800 	.word	0x40004800
 8005b14:	40004c00 	.word	0x40004c00
 8005b18:	40005000 	.word	0x40005000
 8005b1c:	2320      	movs	r3, #32
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b22:	e128      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005b24:	2340      	movs	r3, #64	; 0x40
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2a:	e124      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b32:	e120      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4acb      	ldr	r2, [pc, #812]	; (8005e68 <UART_SetConfig+0x698>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d176      	bne.n	8005c2c <UART_SetConfig+0x45c>
 8005b3e:	4bcb      	ldr	r3, [pc, #812]	; (8005e6c <UART_SetConfig+0x69c>)
 8005b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b46:	2b28      	cmp	r3, #40	; 0x28
 8005b48:	d86c      	bhi.n	8005c24 <UART_SetConfig+0x454>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <UART_SetConfig+0x380>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005bf5 	.word	0x08005bf5
 8005b54:	08005c25 	.word	0x08005c25
 8005b58:	08005c25 	.word	0x08005c25
 8005b5c:	08005c25 	.word	0x08005c25
 8005b60:	08005c25 	.word	0x08005c25
 8005b64:	08005c25 	.word	0x08005c25
 8005b68:	08005c25 	.word	0x08005c25
 8005b6c:	08005c25 	.word	0x08005c25
 8005b70:	08005bfd 	.word	0x08005bfd
 8005b74:	08005c25 	.word	0x08005c25
 8005b78:	08005c25 	.word	0x08005c25
 8005b7c:	08005c25 	.word	0x08005c25
 8005b80:	08005c25 	.word	0x08005c25
 8005b84:	08005c25 	.word	0x08005c25
 8005b88:	08005c25 	.word	0x08005c25
 8005b8c:	08005c25 	.word	0x08005c25
 8005b90:	08005c05 	.word	0x08005c05
 8005b94:	08005c25 	.word	0x08005c25
 8005b98:	08005c25 	.word	0x08005c25
 8005b9c:	08005c25 	.word	0x08005c25
 8005ba0:	08005c25 	.word	0x08005c25
 8005ba4:	08005c25 	.word	0x08005c25
 8005ba8:	08005c25 	.word	0x08005c25
 8005bac:	08005c25 	.word	0x08005c25
 8005bb0:	08005c0d 	.word	0x08005c0d
 8005bb4:	08005c25 	.word	0x08005c25
 8005bb8:	08005c25 	.word	0x08005c25
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005c25 	.word	0x08005c25
 8005bc4:	08005c25 	.word	0x08005c25
 8005bc8:	08005c25 	.word	0x08005c25
 8005bcc:	08005c25 	.word	0x08005c25
 8005bd0:	08005c15 	.word	0x08005c15
 8005bd4:	08005c25 	.word	0x08005c25
 8005bd8:	08005c25 	.word	0x08005c25
 8005bdc:	08005c25 	.word	0x08005c25
 8005be0:	08005c25 	.word	0x08005c25
 8005be4:	08005c25 	.word	0x08005c25
 8005be8:	08005c25 	.word	0x08005c25
 8005bec:	08005c25 	.word	0x08005c25
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e0bc      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e0b8      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c04:	2308      	movs	r3, #8
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e0b4      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e0b0      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c14:	2320      	movs	r3, #32
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e0ac      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c1c:	2340      	movs	r3, #64	; 0x40
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c22:	e0a8      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2a:	e0a4      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a8f      	ldr	r2, [pc, #572]	; (8005e70 <UART_SetConfig+0x6a0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d130      	bne.n	8005c98 <UART_SetConfig+0x4c8>
 8005c36:	4b8d      	ldr	r3, [pc, #564]	; (8005e6c <UART_SetConfig+0x69c>)
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	2b05      	cmp	r3, #5
 8005c40:	d826      	bhi.n	8005c90 <UART_SetConfig+0x4c0>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <UART_SetConfig+0x478>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c61 	.word	0x08005c61
 8005c4c:	08005c69 	.word	0x08005c69
 8005c50:	08005c71 	.word	0x08005c71
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c81 	.word	0x08005c81
 8005c5c:	08005c89 	.word	0x08005c89
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c66:	e086      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6e:	e082      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c70:	2308      	movs	r3, #8
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c76:	e07e      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e07a      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c80:	2320      	movs	r3, #32
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e076      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c88:	2340      	movs	r3, #64	; 0x40
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8e:	e072      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c96:	e06e      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a75      	ldr	r2, [pc, #468]	; (8005e74 <UART_SetConfig+0x6a4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d130      	bne.n	8005d04 <UART_SetConfig+0x534>
 8005ca2:	4b72      	ldr	r3, [pc, #456]	; (8005e6c <UART_SetConfig+0x69c>)
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b05      	cmp	r3, #5
 8005cac:	d826      	bhi.n	8005cfc <UART_SetConfig+0x52c>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x4e4>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005ccd 	.word	0x08005ccd
 8005cb8:	08005cd5 	.word	0x08005cd5
 8005cbc:	08005cdd 	.word	0x08005cdd
 8005cc0:	08005ce5 	.word	0x08005ce5
 8005cc4:	08005ced 	.word	0x08005ced
 8005cc8:	08005cf5 	.word	0x08005cf5
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e050      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e04c      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e048      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e044      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005cec:	2320      	movs	r3, #32
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e040      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005cf4:	2340      	movs	r3, #64	; 0x40
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfa:	e03c      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e038      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a5b      	ldr	r2, [pc, #364]	; (8005e78 <UART_SetConfig+0x6a8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d130      	bne.n	8005d70 <UART_SetConfig+0x5a0>
 8005d0e:	4b57      	ldr	r3, [pc, #348]	; (8005e6c <UART_SetConfig+0x69c>)
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	2b05      	cmp	r3, #5
 8005d18:	d826      	bhi.n	8005d68 <UART_SetConfig+0x598>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0x550>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d39 	.word	0x08005d39
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	08005d49 	.word	0x08005d49
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d59 	.word	0x08005d59
 8005d34:	08005d61 	.word	0x08005d61
 8005d38:	2302      	movs	r3, #2
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e01a      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e016      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e012      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e00e      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005d58:	2320      	movs	r3, #32
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5e:	e00a      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005d60:	2340      	movs	r3, #64	; 0x40
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d66:	e006      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005d68:	2380      	movs	r3, #128	; 0x80
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e002      	b.n	8005d76 <UART_SetConfig+0x5a6>
 8005d70:	2380      	movs	r3, #128	; 0x80
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3f      	ldr	r2, [pc, #252]	; (8005e78 <UART_SetConfig+0x6a8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	f040 80f8 	bne.w	8005f72 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	dc46      	bgt.n	8005e18 <UART_SetConfig+0x648>
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	f2c0 8082 	blt.w	8005e94 <UART_SetConfig+0x6c4>
 8005d90:	3b02      	subs	r3, #2
 8005d92:	2b1e      	cmp	r3, #30
 8005d94:	d87e      	bhi.n	8005e94 <UART_SetConfig+0x6c4>
 8005d96:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <UART_SetConfig+0x5cc>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005e1f 	.word	0x08005e1f
 8005da0:	08005e95 	.word	0x08005e95
 8005da4:	08005e27 	.word	0x08005e27
 8005da8:	08005e95 	.word	0x08005e95
 8005dac:	08005e95 	.word	0x08005e95
 8005db0:	08005e95 	.word	0x08005e95
 8005db4:	08005e37 	.word	0x08005e37
 8005db8:	08005e95 	.word	0x08005e95
 8005dbc:	08005e95 	.word	0x08005e95
 8005dc0:	08005e95 	.word	0x08005e95
 8005dc4:	08005e95 	.word	0x08005e95
 8005dc8:	08005e95 	.word	0x08005e95
 8005dcc:	08005e95 	.word	0x08005e95
 8005dd0:	08005e95 	.word	0x08005e95
 8005dd4:	08005e47 	.word	0x08005e47
 8005dd8:	08005e95 	.word	0x08005e95
 8005ddc:	08005e95 	.word	0x08005e95
 8005de0:	08005e95 	.word	0x08005e95
 8005de4:	08005e95 	.word	0x08005e95
 8005de8:	08005e95 	.word	0x08005e95
 8005dec:	08005e95 	.word	0x08005e95
 8005df0:	08005e95 	.word	0x08005e95
 8005df4:	08005e95 	.word	0x08005e95
 8005df8:	08005e95 	.word	0x08005e95
 8005dfc:	08005e95 	.word	0x08005e95
 8005e00:	08005e95 	.word	0x08005e95
 8005e04:	08005e95 	.word	0x08005e95
 8005e08:	08005e95 	.word	0x08005e95
 8005e0c:	08005e95 	.word	0x08005e95
 8005e10:	08005e95 	.word	0x08005e95
 8005e14:	08005e87 	.word	0x08005e87
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d037      	beq.n	8005e8c <UART_SetConfig+0x6bc>
 8005e1c:	e03a      	b.n	8005e94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e1e:	f7ff f865 	bl	8004eec <HAL_RCCEx_GetD3PCLK1Freq>
 8005e22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e24:	e03c      	b.n	8005ea0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff f874 	bl	8004f18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e34:	e034      	b.n	8005ea0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e36:	f107 0318 	add.w	r3, r7, #24
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff f9c0 	bl	80051c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e44:	e02c      	b.n	8005ea0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e46:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <UART_SetConfig+0x69c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d016      	beq.n	8005e80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e52:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <UART_SetConfig+0x69c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	08db      	lsrs	r3, r3, #3
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	4a07      	ldr	r2, [pc, #28]	; (8005e7c <UART_SetConfig+0x6ac>)
 8005e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e64:	e01c      	b.n	8005ea0 <UART_SetConfig+0x6d0>
 8005e66:	bf00      	nop
 8005e68:	40011400 	.word	0x40011400
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	40007800 	.word	0x40007800
 8005e74:	40007c00 	.word	0x40007c00
 8005e78:	58000c00 	.word	0x58000c00
 8005e7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005e80:	4b9d      	ldr	r3, [pc, #628]	; (80060f8 <UART_SetConfig+0x928>)
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e84:	e00c      	b.n	8005ea0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e86:	4b9d      	ldr	r3, [pc, #628]	; (80060fc <UART_SetConfig+0x92c>)
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e8a:	e009      	b.n	8005ea0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e92:	e005      	b.n	8005ea0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 81de 	beq.w	8006264 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	4a94      	ldr	r2, [pc, #592]	; (8006100 <UART_SetConfig+0x930>)
 8005eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	4413      	add	r3, r2
 8005ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d305      	bcc.n	8005ed8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d903      	bls.n	8005ee0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ede:	e1c1      	b.n	8006264 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	60bb      	str	r3, [r7, #8]
 8005ee6:	60fa      	str	r2, [r7, #12]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	4a84      	ldr	r2, [pc, #528]	; (8006100 <UART_SetConfig+0x930>)
 8005eee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	607a      	str	r2, [r7, #4]
 8005efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005efe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f02:	f7fa f9e9 	bl	80002d8 <__aeabi_uldivmod>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	020b      	lsls	r3, r1, #8
 8005f18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f1c:	0202      	lsls	r2, r0, #8
 8005f1e:	6979      	ldr	r1, [r7, #20]
 8005f20:	6849      	ldr	r1, [r1, #4]
 8005f22:	0849      	lsrs	r1, r1, #1
 8005f24:	2000      	movs	r0, #0
 8005f26:	460c      	mov	r4, r1
 8005f28:	4605      	mov	r5, r0
 8005f2a:	eb12 0804 	adds.w	r8, r2, r4
 8005f2e:	eb43 0905 	adc.w	r9, r3, r5
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	469a      	mov	sl, r3
 8005f3a:	4693      	mov	fp, r2
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	465b      	mov	r3, fp
 8005f40:	4640      	mov	r0, r8
 8005f42:	4649      	mov	r1, r9
 8005f44:	f7fa f9c8 	bl	80002d8 <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f56:	d308      	bcc.n	8005f6a <UART_SetConfig+0x79a>
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5e:	d204      	bcs.n	8005f6a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f66:	60da      	str	r2, [r3, #12]
 8005f68:	e17c      	b.n	8006264 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f70:	e178      	b.n	8006264 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7a:	f040 80c5 	bne.w	8006108 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005f7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	dc48      	bgt.n	8006018 <UART_SetConfig+0x848>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	db7b      	blt.n	8006082 <UART_SetConfig+0x8b2>
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	d879      	bhi.n	8006082 <UART_SetConfig+0x8b2>
 8005f8e:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <UART_SetConfig+0x7c4>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	0800601f 	.word	0x0800601f
 8005f98:	08006027 	.word	0x08006027
 8005f9c:	08006083 	.word	0x08006083
 8005fa0:	08006083 	.word	0x08006083
 8005fa4:	0800602f 	.word	0x0800602f
 8005fa8:	08006083 	.word	0x08006083
 8005fac:	08006083 	.word	0x08006083
 8005fb0:	08006083 	.word	0x08006083
 8005fb4:	0800603f 	.word	0x0800603f
 8005fb8:	08006083 	.word	0x08006083
 8005fbc:	08006083 	.word	0x08006083
 8005fc0:	08006083 	.word	0x08006083
 8005fc4:	08006083 	.word	0x08006083
 8005fc8:	08006083 	.word	0x08006083
 8005fcc:	08006083 	.word	0x08006083
 8005fd0:	08006083 	.word	0x08006083
 8005fd4:	0800604f 	.word	0x0800604f
 8005fd8:	08006083 	.word	0x08006083
 8005fdc:	08006083 	.word	0x08006083
 8005fe0:	08006083 	.word	0x08006083
 8005fe4:	08006083 	.word	0x08006083
 8005fe8:	08006083 	.word	0x08006083
 8005fec:	08006083 	.word	0x08006083
 8005ff0:	08006083 	.word	0x08006083
 8005ff4:	08006083 	.word	0x08006083
 8005ff8:	08006083 	.word	0x08006083
 8005ffc:	08006083 	.word	0x08006083
 8006000:	08006083 	.word	0x08006083
 8006004:	08006083 	.word	0x08006083
 8006008:	08006083 	.word	0x08006083
 800600c:	08006083 	.word	0x08006083
 8006010:	08006083 	.word	0x08006083
 8006014:	08006075 	.word	0x08006075
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	d02e      	beq.n	800607a <UART_SetConfig+0x8aa>
 800601c:	e031      	b.n	8006082 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800601e:	f7fd fff3 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8006022:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006024:	e033      	b.n	800608e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006026:	f7fe f805 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 800602a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800602c:	e02f      	b.n	800608e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800602e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe ff70 	bl	8004f18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800603c:	e027      	b.n	800608e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800603e:	f107 0318 	add.w	r3, r7, #24
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff f8bc 	bl	80051c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800604c:	e01f      	b.n	800608e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800604e:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <UART_SetConfig+0x934>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800605a:	4b2a      	ldr	r3, [pc, #168]	; (8006104 <UART_SetConfig+0x934>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	08db      	lsrs	r3, r3, #3
 8006060:	f003 0303 	and.w	r3, r3, #3
 8006064:	4a24      	ldr	r2, [pc, #144]	; (80060f8 <UART_SetConfig+0x928>)
 8006066:	fa22 f303 	lsr.w	r3, r2, r3
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800606c:	e00f      	b.n	800608e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800606e:	4b22      	ldr	r3, [pc, #136]	; (80060f8 <UART_SetConfig+0x928>)
 8006070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006072:	e00c      	b.n	800608e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006074:	4b21      	ldr	r3, [pc, #132]	; (80060fc <UART_SetConfig+0x92c>)
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006078:	e009      	b.n	800608e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006080:	e005      	b.n	800608e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800608c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800608e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 80e7 	beq.w	8006264 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	4a19      	ldr	r2, [pc, #100]	; (8006100 <UART_SetConfig+0x930>)
 800609c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a0:	461a      	mov	r2, r3
 80060a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a8:	005a      	lsls	r2, r3, #1
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	441a      	add	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	d916      	bls.n	80060f0 <UART_SetConfig+0x920>
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c8:	d212      	bcs.n	80060f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f023 030f 	bic.w	r3, r3, #15
 80060d2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	b29a      	uxth	r2, r3
 80060e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060e2:	4313      	orrs	r3, r2
 80060e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	e0b9      	b.n	8006264 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80060f6:	e0b5      	b.n	8006264 <UART_SetConfig+0xa94>
 80060f8:	03d09000 	.word	0x03d09000
 80060fc:	003d0900 	.word	0x003d0900
 8006100:	08006eac 	.word	0x08006eac
 8006104:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006108:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800610c:	2b20      	cmp	r3, #32
 800610e:	dc49      	bgt.n	80061a4 <UART_SetConfig+0x9d4>
 8006110:	2b00      	cmp	r3, #0
 8006112:	db7c      	blt.n	800620e <UART_SetConfig+0xa3e>
 8006114:	2b20      	cmp	r3, #32
 8006116:	d87a      	bhi.n	800620e <UART_SetConfig+0xa3e>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0x950>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	080061ab 	.word	0x080061ab
 8006124:	080061b3 	.word	0x080061b3
 8006128:	0800620f 	.word	0x0800620f
 800612c:	0800620f 	.word	0x0800620f
 8006130:	080061bb 	.word	0x080061bb
 8006134:	0800620f 	.word	0x0800620f
 8006138:	0800620f 	.word	0x0800620f
 800613c:	0800620f 	.word	0x0800620f
 8006140:	080061cb 	.word	0x080061cb
 8006144:	0800620f 	.word	0x0800620f
 8006148:	0800620f 	.word	0x0800620f
 800614c:	0800620f 	.word	0x0800620f
 8006150:	0800620f 	.word	0x0800620f
 8006154:	0800620f 	.word	0x0800620f
 8006158:	0800620f 	.word	0x0800620f
 800615c:	0800620f 	.word	0x0800620f
 8006160:	080061db 	.word	0x080061db
 8006164:	0800620f 	.word	0x0800620f
 8006168:	0800620f 	.word	0x0800620f
 800616c:	0800620f 	.word	0x0800620f
 8006170:	0800620f 	.word	0x0800620f
 8006174:	0800620f 	.word	0x0800620f
 8006178:	0800620f 	.word	0x0800620f
 800617c:	0800620f 	.word	0x0800620f
 8006180:	0800620f 	.word	0x0800620f
 8006184:	0800620f 	.word	0x0800620f
 8006188:	0800620f 	.word	0x0800620f
 800618c:	0800620f 	.word	0x0800620f
 8006190:	0800620f 	.word	0x0800620f
 8006194:	0800620f 	.word	0x0800620f
 8006198:	0800620f 	.word	0x0800620f
 800619c:	0800620f 	.word	0x0800620f
 80061a0:	08006201 	.word	0x08006201
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d02e      	beq.n	8006206 <UART_SetConfig+0xa36>
 80061a8:	e031      	b.n	800620e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061aa:	f7fd ff2d 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 80061ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061b0:	e033      	b.n	800621a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b2:	f7fd ff3f 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 80061b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061b8:	e02f      	b.n	800621a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe feaa 	bl	8004f18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061c8:	e027      	b.n	800621a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ca:	f107 0318 	add.w	r3, r7, #24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe fff6 	bl	80051c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061d8:	e01f      	b.n	800621a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061da:	4b2d      	ldr	r3, [pc, #180]	; (8006290 <UART_SetConfig+0xac0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061e6:	4b2a      	ldr	r3, [pc, #168]	; (8006290 <UART_SetConfig+0xac0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	08db      	lsrs	r3, r3, #3
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	4a28      	ldr	r2, [pc, #160]	; (8006294 <UART_SetConfig+0xac4>)
 80061f2:	fa22 f303 	lsr.w	r3, r2, r3
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061f8:	e00f      	b.n	800621a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80061fa:	4b26      	ldr	r3, [pc, #152]	; (8006294 <UART_SetConfig+0xac4>)
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061fe:	e00c      	b.n	800621a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006200:	4b25      	ldr	r3, [pc, #148]	; (8006298 <UART_SetConfig+0xac8>)
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006204:	e009      	b.n	800621a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800620c:	e005      	b.n	800621a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006218:	bf00      	nop
    }

    if (pclk != 0U)
 800621a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d021      	beq.n	8006264 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	4a1d      	ldr	r2, [pc, #116]	; (800629c <UART_SetConfig+0xacc>)
 8006226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622a:	461a      	mov	r2, r3
 800622c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	441a      	add	r2, r3
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006242:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	2b0f      	cmp	r3, #15
 8006248:	d909      	bls.n	800625e <UART_SetConfig+0xa8e>
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006250:	d205      	bcs.n	800625e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	b29a      	uxth	r2, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60da      	str	r2, [r3, #12]
 800625c:	e002      	b.n	8006264 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2201      	movs	r2, #1
 8006268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2201      	movs	r2, #1
 8006270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2200      	movs	r2, #0
 8006278:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2200      	movs	r2, #0
 800627e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006280:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006284:	4618      	mov	r0, r3
 8006286:	3748      	adds	r7, #72	; 0x48
 8006288:	46bd      	mov	sp, r7
 800628a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800628e:	bf00      	nop
 8006290:	58024400 	.word	0x58024400
 8006294:	03d09000 	.word	0x03d09000
 8006298:	003d0900 	.word	0x003d0900
 800629c:	08006eac 	.word	0x08006eac

080062a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01a      	beq.n	80063b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800639e:	d10a      	bne.n	80063b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]
  }
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063f4:	f7fb f808 	bl	8001408 <HAL_GetTick>
 80063f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b08      	cmp	r3, #8
 8006406:	d10e      	bne.n	8006426 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f82f 	bl	800647a <UART_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e025      	b.n	8006472 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b04      	cmp	r3, #4
 8006432:	d10e      	bne.n	8006452 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f819 	bl	800647a <UART_WaitOnFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e00f      	b.n	8006472 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b09c      	sub	sp, #112	; 0x70
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	4613      	mov	r3, r2
 8006488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648a:	e0a9      	b.n	80065e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800648c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	f000 80a5 	beq.w	80065e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006496:	f7fa ffb7 	bl	8001408 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d302      	bcc.n	80064ac <UART_WaitOnFlagUntilTimeout+0x32>
 80064a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d140      	bne.n	800652e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064c0:	667b      	str	r3, [r7, #100]	; 0x64
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e6      	bne.n	80064ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3308      	adds	r3, #8
 80064e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	663b      	str	r3, [r7, #96]	; 0x60
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3308      	adds	r3, #8
 80064fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006500:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800650c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e5      	bne.n	80064de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e069      	b.n	8006602 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d051      	beq.n	80065e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654a:	d149      	bne.n	80065e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006554:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800656a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
 8006576:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800657a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e6      	bne.n	8006556 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3308      	adds	r3, #8
 800658e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	613b      	str	r3, [r7, #16]
   return(result);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f023 0301 	bic.w	r3, r3, #1
 800659e:	66bb      	str	r3, [r7, #104]	; 0x68
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3308      	adds	r3, #8
 80065a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065a8:	623a      	str	r2, [r7, #32]
 80065aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	69f9      	ldr	r1, [r7, #28]
 80065ae:	6a3a      	ldr	r2, [r7, #32]
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e5      	bne.n	8006588 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e010      	b.n	8006602 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	4013      	ands	r3, r2
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	bf0c      	ite	eq
 80065f0:	2301      	moveq	r3, #1
 80065f2:	2300      	movne	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	f43f af46 	beq.w	800648c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3770      	adds	r7, #112	; 0x70
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800660a:	b480      	push	{r7}
 800660c:	b085      	sub	sp, #20
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_UARTEx_DisableFifoMode+0x16>
 800661c:	2302      	movs	r3, #2
 800661e:	e027      	b.n	8006670 <HAL_UARTEx_DisableFifoMode+0x66>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2224      	movs	r2, #36	; 0x24
 800662c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800664e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006690:	2302      	movs	r3, #2
 8006692:	e02d      	b.n	80066f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2224      	movs	r2, #36	; 0x24
 80066a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f84f 	bl	8006774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800670c:	2302      	movs	r3, #2
 800670e:	e02d      	b.n	800676c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2224      	movs	r2, #36	; 0x24
 800671c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0201 	bic.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f811 	bl	8006774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006780:	2b00      	cmp	r3, #0
 8006782:	d108      	bne.n	8006796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006794:	e031      	b.n	80067fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006796:	2310      	movs	r3, #16
 8006798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800679a:	2310      	movs	r3, #16
 800679c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	0e5b      	lsrs	r3, r3, #25
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	0f5b      	lsrs	r3, r3, #29
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067be:	7bbb      	ldrb	r3, [r7, #14]
 80067c0:	7b3a      	ldrb	r2, [r7, #12]
 80067c2:	4911      	ldr	r1, [pc, #68]	; (8006808 <UARTEx_SetNbDataToProcess+0x94>)
 80067c4:	5c8a      	ldrb	r2, [r1, r2]
 80067c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067ca:	7b3a      	ldrb	r2, [r7, #12]
 80067cc:	490f      	ldr	r1, [pc, #60]	; (800680c <UARTEx_SetNbDataToProcess+0x98>)
 80067ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	7b7a      	ldrb	r2, [r7, #13]
 80067e0:	4909      	ldr	r1, [pc, #36]	; (8006808 <UARTEx_SetNbDataToProcess+0x94>)
 80067e2:	5c8a      	ldrb	r2, [r1, r2]
 80067e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067e8:	7b7a      	ldrb	r2, [r7, #13]
 80067ea:	4908      	ldr	r1, [pc, #32]	; (800680c <UARTEx_SetNbDataToProcess+0x98>)
 80067ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	08006ec4 	.word	0x08006ec4
 800680c:	08006ecc 	.word	0x08006ecc

08006810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006810:	b084      	sub	sp, #16
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	f107 001c 	add.w	r0, r7, #28
 800681e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	2b01      	cmp	r3, #1
 8006826:	d120      	bne.n	800686a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	4b2a      	ldr	r3, [pc, #168]	; (80068e4 <USB_CoreInit+0xd4>)
 800683a:	4013      	ands	r3, r2
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800684c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684e:	2b01      	cmp	r3, #1
 8006850:	d105      	bne.n	800685e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 faac 	bl	8006dbc <USB_CoreReset>
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]
 8006868:	e01a      	b.n	80068a0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 faa0 	bl	8006dbc <USB_CoreReset>
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	639a      	str	r2, [r3, #56]	; 0x38
 8006892:	e005      	b.n	80068a0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d116      	bne.n	80068d4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <USB_CoreInit+0xd8>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f043 0206 	orr.w	r2, r3, #6
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f043 0220 	orr.w	r2, r3, #32
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068e0:	b004      	add	sp, #16
 80068e2:	4770      	bx	lr
 80068e4:	ffbdffbf 	.word	0xffbdffbf
 80068e8:	03ee0000 	.word	0x03ee0000

080068ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f023 0201 	bic.w	r2, r3, #1
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d115      	bne.n	800695c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800693c:	2001      	movs	r0, #1
 800693e:	f7fa fd6f 	bl	8001420 <HAL_Delay>
      ms++;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fa29 	bl	8006da0 <USB_GetMode>
 800694e:	4603      	mov	r3, r0
 8006950:	2b01      	cmp	r3, #1
 8006952:	d01e      	beq.n	8006992 <USB_SetCurrentMode+0x84>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b31      	cmp	r3, #49	; 0x31
 8006958:	d9f0      	bls.n	800693c <USB_SetCurrentMode+0x2e>
 800695a:	e01a      	b.n	8006992 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d115      	bne.n	800698e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800696e:	2001      	movs	r0, #1
 8006970:	f7fa fd56 	bl	8001420 <HAL_Delay>
      ms++;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3301      	adds	r3, #1
 8006978:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa10 	bl	8006da0 <USB_GetMode>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <USB_SetCurrentMode+0x84>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b31      	cmp	r3, #49	; 0x31
 800698a:	d9f0      	bls.n	800696e <USB_SetCurrentMode+0x60>
 800698c:	e001      	b.n	8006992 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e005      	b.n	800699e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b32      	cmp	r3, #50	; 0x32
 8006996:	d101      	bne.n	800699c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069a8:	b084      	sub	sp, #16
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b086      	sub	sp, #24
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	e009      	b.n	80069dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	3340      	adds	r3, #64	; 0x40
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3301      	adds	r3, #1
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b0e      	cmp	r3, #14
 80069e0:	d9f2      	bls.n	80069c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d11c      	bne.n	8006a22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069f6:	f043 0302 	orr.w	r3, r3, #2
 80069fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	e005      	b.n	8006a2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a34:	461a      	mov	r2, r3
 8006a36:	2300      	movs	r3, #0
 8006a38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a40:	4619      	mov	r1, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a48:	461a      	mov	r2, r3
 8006a4a:	680b      	ldr	r3, [r1, #0]
 8006a4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d10c      	bne.n	8006a6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d104      	bne.n	8006a64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f965 	bl	8006d2c <USB_SetDevSpeed>
 8006a62:	e008      	b.n	8006a76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a64:	2101      	movs	r1, #1
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f960 	bl	8006d2c <USB_SetDevSpeed>
 8006a6c:	e003      	b.n	8006a76 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a6e:	2103      	movs	r1, #3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f95b 	bl	8006d2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a76:	2110      	movs	r1, #16
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8f3 	bl	8006c64 <USB_FlushTxFifo>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f91f 	bl	8006ccc <USB_FlushRxFifo>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aaa:	461a      	mov	r2, r3
 8006aac:	2300      	movs	r3, #0
 8006aae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	e043      	b.n	8006b4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ad8:	d118      	bne.n	8006b0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aec:	461a      	mov	r2, r3
 8006aee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	e013      	b.n	8006b1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b02:	461a      	mov	r2, r3
 8006b04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e008      	b.n	8006b1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	461a      	mov	r2, r3
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3301      	adds	r3, #1
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d3b7      	bcc.n	8006ac2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b52:	2300      	movs	r3, #0
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	e043      	b.n	8006be0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b6e:	d118      	bne.n	8006ba2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b82:	461a      	mov	r2, r3
 8006b84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	e013      	b.n	8006bb4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	e008      	b.n	8006bb4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d3b7      	bcc.n	8006b58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f043 0210 	orr.w	r2, r3, #16
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699a      	ldr	r2, [r3, #24]
 8006c20:	4b0e      	ldr	r3, [pc, #56]	; (8006c5c <USB_DevInit+0x2b4>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f043 0208 	orr.w	r2, r3, #8
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d105      	bne.n	8006c4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699a      	ldr	r2, [r3, #24]
 8006c44:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <USB_DevInit+0x2b8>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c58:	b004      	add	sp, #16
 8006c5a:	4770      	bx	lr
 8006c5c:	803c3800 	.word	0x803c3800
 8006c60:	40000004 	.word	0x40000004

08006c64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3301      	adds	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4a13      	ldr	r2, [pc, #76]	; (8006cc8 <USB_FlushTxFifo+0x64>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d901      	bls.n	8006c84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e01b      	b.n	8006cbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	daf2      	bge.n	8006c72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	019b      	lsls	r3, r3, #6
 8006c94:	f043 0220 	orr.w	r2, r3, #32
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <USB_FlushTxFifo+0x64>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e006      	b.n	8006cbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d0f0      	beq.n	8006c9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	00030d40 	.word	0x00030d40

08006ccc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4a11      	ldr	r2, [pc, #68]	; (8006d28 <USB_FlushRxFifo+0x5c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d901      	bls.n	8006cea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e018      	b.n	8006d1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	daf2      	bge.n	8006cd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2210      	movs	r2, #16
 8006cfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a08      	ldr	r2, [pc, #32]	; (8006d28 <USB_FlushRxFifo+0x5c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e006      	b.n	8006d1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d0f0      	beq.n	8006cfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	00030d40 	.word	0x00030d40

08006d2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	68f9      	ldr	r1, [r7, #12]
 8006d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d78:	f023 0303 	bic.w	r3, r3, #3
 8006d7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d8c:	f043 0302 	orr.w	r3, r3, #2
 8006d90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f003 0301 	and.w	r3, r3, #1
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <USB_CoreReset+0x64>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e01b      	b.n	8006e12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	daf2      	bge.n	8006dc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f043 0201 	orr.w	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <USB_CoreReset+0x64>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d901      	bls.n	8006e04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e006      	b.n	8006e12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d0f0      	beq.n	8006df2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	00030d40 	.word	0x00030d40

08006e24 <memset>:
 8006e24:	4402      	add	r2, r0
 8006e26:	4603      	mov	r3, r0
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d100      	bne.n	8006e2e <memset+0xa>
 8006e2c:	4770      	bx	lr
 8006e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e32:	e7f9      	b.n	8006e28 <memset+0x4>

08006e34 <__libc_init_array>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	4d0d      	ldr	r5, [pc, #52]	; (8006e6c <__libc_init_array+0x38>)
 8006e38:	4c0d      	ldr	r4, [pc, #52]	; (8006e70 <__libc_init_array+0x3c>)
 8006e3a:	1b64      	subs	r4, r4, r5
 8006e3c:	10a4      	asrs	r4, r4, #2
 8006e3e:	2600      	movs	r6, #0
 8006e40:	42a6      	cmp	r6, r4
 8006e42:	d109      	bne.n	8006e58 <__libc_init_array+0x24>
 8006e44:	4d0b      	ldr	r5, [pc, #44]	; (8006e74 <__libc_init_array+0x40>)
 8006e46:	4c0c      	ldr	r4, [pc, #48]	; (8006e78 <__libc_init_array+0x44>)
 8006e48:	f000 f818 	bl	8006e7c <_init>
 8006e4c:	1b64      	subs	r4, r4, r5
 8006e4e:	10a4      	asrs	r4, r4, #2
 8006e50:	2600      	movs	r6, #0
 8006e52:	42a6      	cmp	r6, r4
 8006e54:	d105      	bne.n	8006e62 <__libc_init_array+0x2e>
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5c:	4798      	blx	r3
 8006e5e:	3601      	adds	r6, #1
 8006e60:	e7ee      	b.n	8006e40 <__libc_init_array+0xc>
 8006e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e66:	4798      	blx	r3
 8006e68:	3601      	adds	r6, #1
 8006e6a:	e7f2      	b.n	8006e52 <__libc_init_array+0x1e>
 8006e6c:	08006edc 	.word	0x08006edc
 8006e70:	08006edc 	.word	0x08006edc
 8006e74:	08006edc 	.word	0x08006edc
 8006e78:	08006ee0 	.word	0x08006ee0

08006e7c <_init>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr

08006e88 <_fini>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr
